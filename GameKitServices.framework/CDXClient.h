/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/GameKitServices.framework/GameKitServices
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class <CDXClientDelegate>, NSError, NSString, NSData, NSMutableDictionary;

@interface CDXClient : NSObject  {
    <CDXClientDelegate> *delegate_;
    int holePunchAttemptCount_;
    NSData *preblob_;
    NSMutableDictionary *sessionLookup_;
    NSError *error_;
    int fd_;
    unsigned long long holePunchSID_;
    NSString *server_;
    unsigned short port_;
    unsigned short localPort_;
    struct sockaddr_in { 
        unsigned char sin_len; 
        unsigned char sin_family; 
        unsigned short sin_port; 
        struct in_addr { 
            unsigned int s_addr; 
        } sin_addr; 
        BOOL sin_zero[8]; 
    } cdxaddr_ipv4;
    double holePunchInterval_;
    BOOL preblobIsUpToDate_;
    BOOL willReconfigureShortly_;
    struct __SCDynamicStore { } *scDynamicStore_;
    struct __CFRunLoopSource { } *scDynamicStoreRunLoopSource_;
    struct dispatch_queue_s { } *queue_;
    struct dispatch_source_s { } *source_;
    struct dispatch_source_s { } *holePunchTimer_;

  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id preblobCallback_;

    void *padding_[10];
}

@property <CDXClientDelegate> * delegate;
@property(readonly) NSError * error;
@property(readonly) NSData * preblob;
@property(copy) id preblobCallback;
@property(readonly) struct dispatch_queue_s { }* queue;


- (void)setPreblob:(id)arg1;
- (void)sendHolePunch;
- (BOOL)handleHolePunchEvent;
- (void)resetHolepunchTimer;
- (void)handleFDEvent;
- (void)networkDidChange;
- (void)stopListeningOnSockets;
- (void)startListeningOnSockets;
- (id)initWithOptions:(id)arg1 delegate:(id)arg2;
- (BOOL)sendRaw:(id)arg1;
- (void)invalidateSession:(id)arg1;
- (id)preblob;
- (id)preblobCallback;
- (void)setPreblobCallback:(id)arg1;
- (id)createSessionWithTicket:(id)arg1 sessionKey:(id)arg2;
- (void)start;
- (void)invalidate;
- (void)dealloc;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (id)error;
- (struct dispatch_queue_s { }*)queue;
- (void)setError:(id)arg1;

@end
