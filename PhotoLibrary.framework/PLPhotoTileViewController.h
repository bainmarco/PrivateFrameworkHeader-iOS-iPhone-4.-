/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/PhotoLibrary.framework/PhotoLibrary
 */

@class PLVideoView, PLRotationView, MLPhoto, UIImageView, UIGestureRecognizer, PLImageScrollView, UIImage, PLExpandableImageView, <PLPhotoTileViewControllerDelegate>;

@interface PLPhotoTileViewController : UIViewController <UIScrollViewDelegate, PLImageRotationAnimationProtocol> {
    UIImage *_image;
    UIImage *_pendingImage;
    UIImage *_unscaledImage;
    MLPhoto *_modelPhoto;
    PLRotationView *_rotationView;
    PLImageScrollView *_scrollView;
    PLExpandableImageView *_imageView;
    PLVideoView *_videoView;
    UIImageView *_gradientView;
    UIImageView *_hdrBadgeImageView;
    UIGestureRecognizer *_singleTapGestureRecognizer;
    UIGestureRecognizer *_doubleTapGestureRecognizer;
    <PLPhotoTileViewControllerDelegate> *_tileDelegate;
    int _imageOrientation;
    struct CGSize { 
        float width; 
        float height; 
    } _imageSize;
    int _imageIndex;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } _tileFrame;
    BOOL _zoomToFillInsteadOfToFit;
    BOOL _useLessThanMinZoomForZoomedOutTest;
    BOOL _allowZoomToFill;
    id _orientationDelegate;
    float _cropRectZoomScale;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } _cropOverlayRect;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } _cropRect;
    float _maxZoomScale;
    float _minZoomScale;
    float _zoomToFillScale;
    int _imageRotationDegrees;
    int _currentRotationDegrees;
    int _mode;
    int _lastDisplayedOrientation;
    BOOL _clientIsTemporarilyWallpaper;
    BOOL _userDidAdjustWallpaper;
    float _wallpaperPortraitZoomScale;
    float _wallpaperLandscapeZoomScale;
    float _zoomScaleBeforeZooming;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } _cropRectBeforeDragging;
    BOOL _force1XCroppedImage;
    BOOL _forceNativeScreenScale;
    BOOL _isBeingDeleted;
    BOOL _centerContentVertically;
    unsigned int _imageIsThumbnail : 1;
    unsigned int _isTVOut : 1;
    unsigned int _zooming : 1;
    unsigned int _autoZooming : 1;
    unsigned int _zoomGesturesEnabled : 1;
    unsigned int _userDidZoom : 1;
    unsigned int _ignoreZoomChange : 1;
    unsigned int _tileParentIsPageController : 1;
    unsigned int _lockedUnderCropOverlay : 1;
    unsigned int _viewDidAppear : 1;
    unsigned int _viewWillAppear : 1;
    unsigned int _didRequestFullSizeImage : 1;
    unsigned int _useZoomScaleForCropRect : 1;
    unsigned int _photoShouldBeHDRBadged : 1;
    unsigned int _hdrBadgeShouldBeVisible : 1;
    unsigned int _didSetHDRForModelPhoto : 1;
    unsigned int _isRotating : 1;
}

@property(retain) MLPhoto * photo;
@property unsigned int imageIndex;
@property(retain) UIImage * thumbnailImage;
@property struct CGRect { struct CGPoint { float x; float y; } origin; struct CGSize { float width; float height; } size; } tileFrame;
@property(readonly) int rotationDegrees;
@property BOOL force1XCroppedImage;
@property BOOL forceNativeScreenScale;
@property(retain) UIImage * unscaledImage;
@property BOOL centerContentVertically;
@property BOOL isBeingDeleted;

+ (struct CGSize { float x1; float x2; })tileSize;
+ (struct CGSize { float x1; float x2; })tvOutTileSize;
+ (id)newPhotoTileViewControllerWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 imageRef:(struct CGImage { }*)arg2 imageOrientation:(int)arg3 allowZoomToFill:(BOOL)arg4 mode:(int)arg5;
+ (id)newPhotoTileViewControllerWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 image:(id)arg2 allowZoomToFill:(BOOL)arg3 mode:(int)arg4;
+ (id)newPhotoTileViewControllerWithFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 modelPhoto:(id)arg2 mode:(int)arg3;
+ (void)_initializeSafeCategory;

- (id)thumbnailImage;
- (void)loadView;
- (void)viewDidLoad;
- (id)viewForZoomingInScrollView:(id)arg1;
- (id)scrollView;
- (void)viewDidAppear:(BOOL)arg1;
- (BOOL)allowsEditing;
- (void)viewDidDisappear:(BOOL)arg1;
- (int)_imageOrientation;
- (void)scrollViewDidZoom:(id)arg1;
- (int)rotationDegrees;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(BOOL)arg2;
- (void)scrollViewWillBeginZooming:(id)arg1 withView:(id)arg2;
- (id)imageView;
- (void)viewWillAppear:(BOOL)arg1;
- (BOOL)shouldAutorotateToInterfaceOrientation:(int)arg1;
- (void)willAnimateRotationToInterfaceOrientation:(int)arg1 duration:(double)arg2;
- (void)didRotateFromInterfaceOrientation:(int)arg1;
- (void)didFinishRotation;
- (id)image;
- (BOOL)isRotating;
- (void)prepareForReuse;
- (struct CGSize { float x1; float x2; })scrollView:(id)arg1 contentSizeForZoomScale:(float)arg2 withProposedSize:(struct CGSize { float x1; float x2; })arg3;
- (void)scrollViewDidEndZooming:(id)arg1 withView:(id)arg2 atScale:(float)arg3;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)setZoomScale:(float)arg1;
- (BOOL)gesturesEnabled;
- (void)setGesturesEnabled:(BOOL)arg1;
- (id)init;
- (int)imageOrientation;
- (void)dealloc;
- (id)description;
- (void)willStartRotatingByDegrees:(int)arg1;
- (void)didCancelRotation;
- (id)dictionaryWithCroppedImageForRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withOptions:(int)arg2;
- (void)setThumbnailImage:(id)arg1;
- (BOOL)centerContentVertically;
- (id)unscaledImage;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })tileFrame;
- (id)initWithPhoto:(id)arg1 image:(id)arg2 frame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 isThumbnail:(BOOL)arg4 imageOrientation:(int)arg5 allowZoomToFill:(BOOL)arg6 mode:(int)arg7;
- (id)initForPageController;
- (BOOL)tileIsOnScreen;
- (void)setPhoto:(id)arg1;
- (id)layoutHistory;
- (void)setZoomingGesturesEnabled:(BOOL)arg1;
- (void)forceZoomingGesturesEnabled;
- (id)expandableImageView;
- (id)newCGImageBackedUIImage;
- (id)tileDelegate;
- (BOOL)userDidAdjustWallpaper;
- (BOOL)_clientIsWallpaper;
- (void)_addRotationView;
- (void)_repositionHDRBadge;
- (void)_setupHDRBadge;
- (void)_configureViews;
- (void)_centerImageInScrollView;
- (void)_adjustScrollViewContentInsetWithContentSize:(struct CGSize { float x1; float x2; })arg1;
- (void)_adjustScrollViewVerticalContentOffset;
- (void)_updateGradientImageForOrientation:(int)arg1;
- (void)_updateModelPhotoWithImage:(id)arg1;
- (void)_setImage:(id)arg1 isThumbnail:(BOOL)arg2;
- (void)refreshTileWithFullScreenImage:(id)arg1;
- (BOOL)didRequestFullSizeImage;
- (void)_handleSingleTap:(id)arg1;
- (void)_requestFullSizeImage;
- (void)_handleDoubleTap:(id)arg1;
- (id)newImageWithCropRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 croppedImageData:(id*)arg2 fullScreenImageData:(id*)arg3 fullScreenImage:(struct CGImage {}**)arg4 imageCropRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; }*)arg5 intersectCropWithFullRect:(BOOL)arg6;
- (float)minRotatedScale;
- (float)_calculateZoomScale:(BOOL)arg1 inView:(id)arg2;
- (float)_minZoomScaleInView:(id)arg1;
- (float)minZoomScale;
- (float)maxZoomScale;
- (float)_zoomToFillScaleInView:(id)arg1;
- (float)zoomToFillScale;
- (float)defaultZoomScale;
- (float)currentToDefaultZoomRatio;
- (BOOL)isZoomedOut;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })frameForImageAtDefaultScale;
- (void)setOrientationDelegate:(id)arg1;
- (void)_setDefaultZoomScale;
- (void)_updateZoomScalesForView:(id)arg1;
- (void)updateZoomScales;
- (void)setAllowsZoomToFill:(BOOL)arg1;
- (void)_resetRotationState;
- (BOOL)_imageRotationAngleAffectsBounds;
- (void)_setRotationDegrees:(int)arg1;
- (void)_adjustZoomForEnteringMode:(BOOL)arg1;
- (void)setLockedUnderCropOverlay:(BOOL)arg1;
- (BOOL)force1XCroppedImage;
- (void)setForce1XCroppedImage:(BOOL)arg1;
- (BOOL)forceNativeScreenScale;
- (void)setForceNativeScreenScale:(BOOL)arg1;
- (void)setUnscaledImage:(id)arg1;
- (void)setCenterContentVertically:(BOOL)arg1;
- (BOOL)isBeingDeleted;
- (void)setIsBeingDeleted:(BOOL)arg1;
- (void)setVideoView:(id)arg1;
- (BOOL)hasFullSizeImage;
- (id)_newOriginalImageForPickerFromCachedData;
- (void)setCropOverlayRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 forCropRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2;
- (void)setFullSizeImage:(id)arg1;
- (id)photo;
- (void)setTileFrame:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)setTVOut:(BOOL)arg1;
- (id)initWithPhoto:(id)arg1 thumbnailImage:(id)arg2 size:(struct CGSize { float x1; float x2; })arg3;
- (void)setImageIndex:(unsigned int)arg1;
- (void)setTileDelegate:(id)arg1;
- (id)videoView;
- (BOOL)photoShouldHaveHDRBadge;
- (void)ensureFullSizeImageLoaded;
- (void)contentViewFrameChanged;
- (unsigned int)imageIndex;
- (BOOL)isTVOut;
- (void)setClientIsWallpaper:(BOOL)arg1;
- (void)setHDRBadgeVisible:(BOOL)arg1;
- (void)updateAfterCollapse;

@end
