/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/WebKit.framework/WebKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSURLRequest, WebScriptObject, WAKView, WebFrameView, WebScriptCallFrame;

@interface WebFramePrivate : NSObject  {

  /* Error parsing encoded ivar type info: ^{Frame=i^{Page}{FrameTree="m_thisFrame"^{Frame}"m_parent"^{Frame}"m_name"{AtomicString="m_string"{String="m_impl"{RefPtr<WebCore::StringImpl>="m_ptr"^{StringImpl}}}}"m_nextSibling"{RefPtr<WebCore::Frame>="m_ptr"^{Frame}}"m_previousSibling"^{Frame}"m_firstChild"{RefPtr<WebCore::Frame>="m_ptr"^{Frame}}"m_lastChild"^{Frame}"m_childCount"I}{FrameLoader="_vptr$FrameLoader"^^?"m_frame"^{Frame}"m_client"^{FrameLoaderClient}"m_policyChecker"{PolicyChecker="m_frame"^{Frame}"m_delegateIsDecidingNavigationPolicy"B"m_delegateIsHandlingUnimplementablePolicy"B"m_loadType"i"m_callback"{PolicyCallback="m_request"{ResourceRequest="m_url"{KURL="m_string"{String="m_impl"{RefPtr<WebCore::StringImpl>="m_ptr"^{StringImpl}}}"m_isValid"b1"m_protocolInHTTPFamily"b1"m_schemeEnd"i"m_userStart"i"m_userEnd"i"m_passwordEnd"i"m_hostEnd"i"m_portEnd"i"m_pathAfterLastSlash"i"m_pathEnd"i"m_queryEnd"i"m_fragmentEnd"i}"m_cachePolicy"i"m_timeoutInterval"d"m_firstPartyForCookies"{KURL="m_string"{String="m_impl"{RefPtr<WebCore::StringImpl>="m_ptr"^{StringImpl}}}"m_isValid"b1"m_protocolInHTTPFamily"b1"m_schemeEnd"i"m_userStart"i"m_userEnd"i"m_passwordEnd"i"m_hostEnd"i"m_portEnd"i"m_pathAfterLastSlash"i"m_pathEnd"i"m_queryEnd"i"m_fragmentEnd"i}"m_httpMethod"{String="m_impl"{RefPtr<WebCore::StringImpl>="m_ptr"^{StringImpl}}}"m_httpHeaderFields"{HTTPHeaderMap="m_impl"{HashTable<WebCore::AtomicString,std::pair<WebCore::AtomicString, WebCore::String>,WTF::PairFirstExtractor<std::pair<WebCore::AtomicString, WebCore::String> >,WebCore::CaseFoldingHash,WTF::PairHashTraits<WTF::HashTraits<WebCore::AtomicString>, WTF::HashTraits<WebCore::String> >,WTF::HashTraits<WebCore::AtomicString> >="m_table"^{pair<WebCore::AtomicString,WebCore::String>}"m_tableSize"i"m_tableSizeMask"i"m_keyCount"i"m_deletedCount"i}}"m_responseContentDispositionEncodingFallbackArray"{Vector<WebCore::String,0ul>="m_size"I"m_buffer"{VectorBuffer<WebCore::String,0ul>="m_buffer"^{String}"m_capacity"I}}"m_httpBody"{RefPtr<WebCore::FormData>="m_ptr"^{FormData}}"m_allowCookies"B"m_resourceRequestUpdated"B"m_platformRequestUpdated"B"m_reportUploadProgress"B"m_priority"i"m_targetType"i"m_mainResourceRequest"B"m_nsRequest"{RetainPtr<NSURLRequest>="m_ptr"@"NSURLRequest"}}"m_formState"{RefPtr<WebCore::FormState>="m_ptr"^{FormState}}"m_frameName"{String="m_impl"{RefPtr<WebCore::StringImpl>="m_ptr"^{StringImpl}}}"m_navigationFunction"^?"m_newWindowFunction"^?"m_contentFunction"^?"m_argument"^v}}"m_history"{HistoryController="m_frame"^{Frame}"m_currentItem"{RefPtr<WebCore::HistoryItem>="m_ptr"^{HistoryItem}}"m_previousItem"{RefPtr<WebCore::HistoryItem>="m_ptr"^{HistoryItem}}"m_provisionalItem"{RefPtr<WebCore::HistoryItem>="m_ptr"^{HistoryItem}}}"m_notifer"{ResourceLoadNotifier="m_frame"^{Frame}}"m_writer"{DocumentWriter="m_frame"^{Frame}"m_receivedData"B"m_mimeType"{String="m_impl"{RefPtr<WebCore::StringImpl>="m_ptr"^{StringImpl}}}"m_encodingWasChosenByUser"B"m_encoding"{String="m_impl"{RefPtr<WebCore::StringImpl>="m_ptr"^{StringImpl}}}"m_decoder"{RefPtr<WebCore::TextResourceDecoder>="m_ptr"^{TextResourceDecoder}}}"m_state"i"m_loadType"i"m_documentLoader"{RefPtr<WebCore::DocumentLoader>="m_ptr"^{DocumentLoader}}"m_provisionalDocumentLoader"{RefPtr<WebCore::DocumentLoader>="m_ptr"^{DocumentLoader}}"m_policyDocumentLoader"{RefPtr<WebCore::DocumentLoader>="m_ptr"^{DocumentLoader}}"m_delegateIsHandlingProvisionalLoadError"B"m_firstLayoutDone"B"m_quickRedirectComing"B"m_sentRedirectNotification"B"m_inStopAllLoaders"B"m_outgoingReferrer"{String="m_impl"{RefPtr<WebCore::StringImpl>="m_ptr"^{StringImpl}}}"m_isExecutingJavaScriptFormAction"B"m_didCallImplicitClose"B"m_wasUnloadEventEmitted"B"m_pageDismissalEventBeingDispatched"B"m_isComplete"B"m_isLoadingMainResource"B"m_pendingStateObject"{RefPtr<WebCore::SerializedScriptValue>="m_ptr"^{SerializedScriptValue}}"m_URL"{KURL="m_string"{String="m_impl"{RefPtr<WebCore::StringImpl>="m_ptr"^{StringImpl}}}"m_isValid"b1"m_protocolInHTTPFamily"b1"m_schemeEnd"i"m_userStart"i"m_userEnd"i"m_passwordEnd"i"m_hostEnd"i"m_portEnd"i"m_pathAfterLastSlash"i"m_pathEnd"i"m_queryEnd"i"m_fragmentEnd"i}"m_workingURL"{KURL="m_string"{String="m_impl"{RefPtr<WebCore::StringImpl>="m_ptr"^{StringImpl}}}"m_isValid"b1"m_protocolInHTTPFamily"b1"m_schemeEnd"i"m_userStart"i"m_userEnd"i"m_passwordEnd"i"m_hostEnd"i"m_portEnd"i"m_pathAfterLastSlash"i"m_pathEnd"i"m_queryEnd"i"m_fragmentEnd"i}"m_iconLoader"{OwnPtr<WebCore::IconLoader>="m_ptr"^{IconLoader}}"m_mayLoadIconLater"B"m_cancellingWithLoadInProgress"B"m_needsClear"B"m_receivedData"B"m_containsPlugIns"B"m_submittedFormURL"{KURL="m_string"{String="m_impl"{RefPtr<WebCore::StringImpl>="m_ptr"^{StringImpl}}}"m_isValid"b1"m_protocolInHTTPFamily"b1"m_schemeEnd"i"m_userStart"i"m_userEnd"i"m_passwordEnd"i"m_hostEnd"i"m_portEnd"i"m_pathAfterLastSlash"i"m_pathEnd"i"m_queryEnd"i"m_fragmentEnd"i}"m_checkTimer"{Timer<WebCore::FrameLoader>="_vptr$TimerBase"^^?"m_nextFireTime"d"m_repeatInterval"d"m_heapIndex"i"m_heapInsertionOrder"I"m_object"^{FrameLoader}"m_function"{?="__pfn"^"__delta"i}}"m_shouldCallCheckCompleted"B"m_shouldCallCheckLoadComplete"B"m_opener"^{Frame}"m_openedFrames"{HashSet<WebCore::Frame*,WTF::PtrHash<WebCore::Frame*>,WTF::HashTraits<WebCore::Frame*> >="m_impl"{HashTable<WebCore::Frame*,WebCore::Frame*,WTF::IdentityExtractor<WebCore::Frame*>,WTF::PtrHash<WebCore::Frame*>,WTF::HashTraits<WebCore::Frame*>,WTF::HashTraits<WebCore::Frame*> >="m_table"^^{Frame}"m_tableSize"i"m_tableSizeMask"i"m_keyCount"i"m_deletedCount"i}}"m_creatingInitialEmptyDocument"B"m_isDisplayingInitialEmptyDocument"B"m_committedFirstRealDocumentLoad"B"m_didPerformFirstNavigation"B"m_loadingFromCachedPage"B"m_suppressOpenerInNewFrame"B"m_sandboxFlags"i"m_forcedSandboxFlags"i"m_loadsSynchronously"B}{RedirectScheduler="m_frame"^{Frame}"m_timer"{Timer<WebCore::RedirectScheduler>="_vptr$TimerBase"^^?"m_nextFireTime"d"m_repeatInterval"d"m_heapIndex"i"m_heapInsertionOrder"I"m_object"^{RedirectScheduler}"m_function"{?="__pfn"^"__delta"i}}"m_redirect"{OwnPtr<WebCore::ScheduledNavigation>="m_ptr"^{ScheduledNavigation}}}{RefPtr<WebCore::DOMWindow>="m_ptr"^{DOMWindow}}{HashSet<WebCore::DOMWindow*,WTF::PtrHash<WebCore::DOMWindow*>,WTF::HashTraits<WebCore::DOMWindow*> >="m_impl"{HashTable<WebCore::DOMWindow*,WebCore::DOMWindow*,WTF::IdentityExtractor<WebCore::DOMWindow*>,WTF::PtrHash<WebCore::DOMWindow*>,WTF::HashTraits<WebCore::DOMWindow*>,WTF::HashTraits<WebCore::DOMWindow*> >="m_table"^^{DOMWindow}"m_tableSize"i"m_tableSizeMask"i"m_keyCount"i"m_deletedCount"i}}^{HTMLFrameOwnerElement}{RefPtr<WebCore::FrameView>="m_ptr"^{FrameView}}{RefPtr<WebCore::Document>="m_ptr"^{Document}}{ScriptController="m_windowShells"{HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld>,JSC::ProtectedPtr<WebCore::JSDOMWindowShell>,WTF::PtrHash<WTF::RefPtr<WebCore::DOMWrapperWorld> >,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld> >,WTF::HashTraits<JSC::ProtectedPtr<WebCore::JSDOMWindowShell> > >="m_impl"{HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld>,std::pair<WTF::RefPtr<WebCore::DOMWrapperWorld>, JSC::ProtectedPtr<WebCore::JSDOMWindowShell> >,WTF::PairFirstExtractor<std::pair<WTF::RefPtr<WebCore::DOMWrapperWorld>, JSC::ProtectedPtr<WebCore::JSDOMWindowShell> > >,WTF::PtrHash<WTF::RefPtr<WebCore::DOMWrapperWorld> >,WTF::PairHashTraits<WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld> >, WTF::HashTraits<JSC::ProtectedPtr<WebCore::JSDOMWindowShell> > >,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld> > >="m_table"^{pair<WTF::RefPtr<WebCore::DOMWrapperWorld>,JSC::ProtectedPtr<WebCore::JSDOMWindowShell> >}"m_tableSize"i"m_tableSizeMask"i"m_keyCount"i"m_deletedCount"i}}"m_frame"^{Frame}"m_handlerLineNumber"i"m_sourceURL"^{String}"m_inExecuteScript"B"m_processingTimerCallback"B"m_paused"B"m_allowPopupsFromPlugin"B"m_bindingRootObject"{RefPtr<JSC::Bindings::RootObject>="m_ptr"^{RootObject}}"m_rootObjects"{HashMap<void*,WTF::RefPtr<JSC::Bindings::RootObject>,WTF::PtrHash<void*>,WTF::HashTraits<void*>,WTF::HashTraits<WTF::RefPtr<JSC::Bindings::RootObject> > >="m_impl"{HashTable<void*,std::pair<void*, WTF::RefPtr<JSC::Bindings::RootObject> >,WTF::PairFirstExtractor<std::pair<void*, WTF::RefPtr<JSC::Bindings::RootObject> > >,WTF::PtrHash<void*>,WTF::PairHashTraits<WTF::HashTraits<void*>, WTF::HashTraits<WTF::RefPtr<JSC::Bindings::RootObject> > >,WTF::HashTraits<void*> >="m_table"^{pair<void*,WTF::RefPtr<JSC::Bindings::RootObject> >}"m_tableSize"i"m_tableSizeMask"i"m_keyCount"i"m_deletedCount"i}}"m_windowScriptObject"{RetainPtr<WebScriptObject>="m_ptr"@"WebScriptObject"}"m_XSSAuditor"{OwnPtr<WebCore::XSSAuditor>="m_ptr"^{XSSAuditor}}}{String="m_impl"{RefPtr<WebCore::StringImpl>="m_ptr"^{StringImpl}}}{String="m_impl"{RefPtr<WebCore::StringImpl>="m_ptr"^{StringImpl}}}f{SelectionController="m_frame"^{Frame}"m_xPosForVerticalArrowNavigation"i"m_selection"{VisibleSelection="m_base"{Position="m_anchorNode"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_offset"i"m_anchorType"b2"m_isLegacyEditingPosition"b1}"m_extent"{Position="m_anchorNode"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_offset"i"m_anchorType"b2"m_isLegacyEditingPosition"b1}"m_start"{Position="m_anchorNode"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_offset"i"m_anchorType"b2"m_isLegacyEditingPosition"b1}"m_end"{Position="m_anchorNode"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_offset"i"m_anchorType"b2"m_isLegacyEditingPosition"b1}"m_affinity"i"m_selectionType"i"m_baseIsFirst"B}"m_granularity"i"m_caretBlinkTimer"{Timer<WebCore::SelectionController>="_vptr$TimerBase"^^?"m_nextFireTime"d"m_repeatInterval"d"m_heapIndex"i"m_heapInsertionOrder"I"m_object"^{SelectionController}"m_function"{?="__pfn"^"__delta"i}}"m_caretRect"{IntRect="m_location"{IntPoint="m_x"i"m_y"i}"m_size"{IntSize="m_width"i"m_height"i}}"m_absCaretBounds"{IntRect="m_location"{IntPoint="m_x"i"m_y"i}"m_size"{IntSize="m_width"i"m_height"i}}"m_absoluteCaretRepaintBounds"{IntRect="m_location"{IntPoint="m_x"i"m_y"i}"m_size"{IntSize="m_width"i"m_height"i}}"m_needsLayout"B"m_absCaretBoundsDirty"B"m_isDirectional"B"m_isDragCaretController"B"m_isCaretBlinkingSuspended"B"m_focused"B"m_caretVisible"B"m_caretPaint"B"m_updateAppearanceEnabled"B"m_caretBlinks"B"m_caretColor"{Color="m_color"I"m_valid"B}"m_closeTypingSuppressions"i}{VisibleSelection="m_base"{Position="m_anchorNode"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_offset"i"m_anchorType"b2"m_isLegacyEditingPosition"b1}"m_extent"{Position="m_anchorNode"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_offset"i"m_anchorType"b2"m_isLegacyEditingPosition"b1}"m_start"{Position="m_anchorNode"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_offset"i"m_anchorType"b2"m_isLegacyEditingPosition"b1}"m_end"{Position="m_anchorNode"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_offset"i"m_anchorType"b2"m_isLegacyEditingPosition"b1}"m_affinity"i"m_selectionType"i"m_baseIsFirst"B}{Editor="m_frame"^{Frame}"m_deleteButtonController"{OwnPtr<WebCore::DeleteButtonController>="m_ptr"^{DeleteButtonController}}"m_lastEditCommand"{RefPtr<WebCore::EditCommand>="m_ptr"^{EditCommand}}"m_removedAnchor"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_compositionNode"{RefPtr<WebCore::Text>="m_ptr"^{Text}}"m_compositionStart"I"m_compositionEnd"I"m_customCompositionUnderlines"{Vector<WebCore::CompositionUnderline,0ul>="m_size"I"m_buffer"{VectorBuffer<WebCore::CompositionUnderline,0ul>="m_buffer"^{CompositionUnderline}"m_capacity"I}}"m_ignoreCompositionSelectionChange"B"m_shouldStartNewKillRingSequence"B"m_shouldStyleWithCSS"B}{EventHandler="m_frame"^{Frame}"m_mousePressed"B"m_capturesDragging"B"m_mousePressNode"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_mouseDownMayStartSelect"B"m_mouseDownWasSingleClickInSelection"B"m_beganSelectingText"B"m_panScrollStartPos"{IntPoint="m_x"i"m_y"i}"m_panScrollInProgress"B"m_panScrollButtonPressed"B"m_springLoadedPanScrollInProgress"B"m_hoverTimer"{Timer<WebCore::EventHandler>="_vptr$TimerBase"^^?"m_nextFireTime"d"m_repeatInterval"d"m_heapIndex"i"m_heapInsertionOrder"I"m_object"^{EventHandler}"m_function"{?="__pfn"^"__delta"i}}"m_autoscrollTimer"{Timer<WebCore::EventHandler>="_vptr$TimerBase"^^?"m_nextFireTime"d"m_repeatInterval"d"m_heapIndex"i"m_heapInsertionOrder"I"m_object"^{EventHandler}"m_function"{?="__pfn"^"__delta"i}}"m_autoscrollRenderer"^{RenderObject}"m_autoscrollInProgress"B"m_mouseDownMayStartAutoscroll"B"m_mouseDownWasInSubframe"B"m_fakeMouseMoveEventTimer"{Timer<WebCore::EventHandler>="_vptr$TimerBase"^^?"m_nextFireTime"d"m_repeatInterval"d"m_heapIndex"i"m_heapInsertionOrder"I"m_object"^{EventHandler}"m_function"{?="__pfn"^"__delta"i}}"m_svgPan"B"m_instanceUnderMouse"{RefPtr<WebCore::SVGElementInstance>="m_ptr"^{SVGElementInstance}}"m_lastInstanceUnderMouse"{RefPtr<WebCore::SVGElementInstance>="m_ptr"^{SVGElementInstance}}"m_resizeLayer"^{RenderLayer}"m_capturingMouseEventsNode"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_nodeUnderMouse"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_lastNodeUnderMouse"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_lastMouseMoveEventSubframe"{RefPtr<WebCore::Frame>="m_ptr"^{Frame}}"m_lastScrollbarUnderMouse"{RefPtr<WebCore::Scrollbar>="m_ptr"^{Scrollbar}}"m_clickCount"i"m_clickNode"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_gestureInitialDiameter"f"m_gestureLastDiameter"f"m_gestureInitialRotation"f"m_gestureLastRotation"f"m_firstTouchID"I"m_touchesByID"{HashMap<unsigned int,WTF::RefPtr<WebCore::Touch>,WTF::IntHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebCore::Touch> > >="m_impl"{HashTable<unsigned int,std::pair<unsigned int, WTF::RefPtr<WebCore::Touch> >,WTF::PairFirstExtractor<std::pair<unsigned int, WTF::RefPtr<WebCore::Touch> > >,WTF::IntHash<unsigned int>,WTF::PairHashTraits<WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::RefPtr<WebCore::Touch> > >,WTF::HashTraits<unsigned int> >="m_table"^{pair<unsigned int,WTF::RefPtr<WebCore::Touch> >}"m_tableSize"i"m_tableSizeMask"i"m_keyCount"i"m_deletedCount"i}}"m_gestureTargets"{HashSet<WTF::RefPtr<WebCore::EventTarget>,WTF::PtrHash<WTF::RefPtr<WebCore::EventTarget> >,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget> > >="m_impl"{HashTable<WTF::RefPtr<WebCore::EventTarget>,WTF::RefPtr<WebCore::EventTarget>,WTF::IdentityExtractor<WTF::RefPtr<WebCore::EventTarget> >,WTF::PtrHash<WTF::RefPtr<WebCore::EventTarget> >,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget> >,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget> > >="m_table"^{RefPtr<WebCore::EventTarget>}"m_tableSize"i"m_tableSizeMask"i"m_keyCount"i"m_deletedCount"i}}"m_touchEventTargetSubframe"{RefPtr<WebCore::Frame>="m_ptr"^{Frame}}"m_frameSetBeingResized"{RefPtr<WebCore::HTMLFrameSetElement>="m_ptr"^{HTMLFrameSetElement}}"m_offsetFromResizeCorner"{IntSize="m_width"i"m_height"i}"m_currentMousePosition"{IntPoint="m_x"i"m_y"i}"m_mouseDownPos"{IntPoint="m_x"i"m_y"i}"m_mouseDownTimestamp"d"m_mouseDown"{PlatformMouseEvent="m_position"{IntPoint="m_x"i"m_y"i}"m_globalPosition"{IntPoint="m_x"i"m_y"i}"m_button"i"m_eventType"i"m_clickCount"i"m_shiftKey"B"m_ctrlKey"B"m_altKey"B"m_metaKey"B"m_timestamp"d"m_modifierFlags"I}"m_useLatchedWheelEventNode"B"m_latchedWheelEventNode"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_widgetIsLatched"B"m_previousWheelScrolledNode"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_mouseDownView"@"WAKView""m_sendingEventToSubview"B}{AnimationController="m_data"^{AnimationControllerPrivate}}{RefPtr<WebCore::CSSMutableStyleDeclaration>="m_ptr"^{CSSMutableStyleDeclaration}}{Timer<WebCore::Frame>="_vptr$TimerBase"^^?"m_nextFireTime"d"m_repeatInterval"d"m_heapIndex"i"m_heapInsertionOrder"I"m_object"^{Frame}"m_function"{?="__pfn"^"__delta"i}}f{IntPoint="m_x"i"m_y"i}{ViewportArguments="initialScale"f"minimumScale"f"maximumScale"f"width"f"height"f"userScalable"f}B{VisibleSelection="m_base"{Position="m_anchorNode"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_offset"i"m_anchorType"b2"m_isLegacyEditingPosition"b1}"m_extent"{Position="m_anchorNode"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_offset"i"m_anchorType"b2"m_isLegacyEditingPosition"b1}"m_start"{Position="m_anchorNode"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_offset"i"m_anchorType"b2"m_isLegacyEditingPosition"b1}"m_end"{Position="m_anchorNode"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_offset"i"m_anchorType"b2"m_isLegacyEditingPosition"b1}"m_affinity"i"m_selectionType"i"m_baseIsFirst"B}{VisibleSelection="m_base"{Position="m_anchorNode"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_offset"i"m_anchorType"b2"m_isLegacyEditingPosition"b1}"m_extent"{Position="m_anchorNode"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_offset"i"m_anchorType"b2"m_isLegacyEditingPosition"b1}"m_start"{Position="m_anchorNode"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_offset"i"m_anchorType"b2"m_isLegacyEditingPosition"b1}"m_end"{Position="m_anchorNode"{RefPtr<WebCore::Node>="m_ptr"^{Node}}"m_offset"i"m_anchorType"b2"m_isLegacyEditingPosition"b1}"m_affinity"i"m_selectionType"i"m_baseIsFirst"B}{FloatSize="m_width"f"m_height"f}IIIdd{Timer<WebCore::Frame>="_vptr$TimerBase"^^?"m_nextFireTime"d"m_repeatInterval"d"m_heapIndex"i"m_heapInsertionOrder"I"m_object"^{Frame}"m_function"{?="__pfn"^"__delta"i}}iBBBBBBi} */
    struct Frame { int x1; struct Page {} *x2; struct FrameTree { 
            struct Frame {} *m_thisFrame; 
            struct Frame {} *m_parent; 
            struct AtomicString { 
                struct String { 
                    struct RefPtr<WebCore::StringImpl> { 
                        struct StringImpl {} *m_ptr; 
                    } m_impl; 
                } m_string; 
            } m_name; 
            struct RefPtr<WebCore::Frame> { 
                struct Frame {} *m_ptr; 
            } m_nextSibling; 
            struct Frame {} *m_previousSibling; 
            struct RefPtr<WebCore::Frame> { 
                struct Frame {} *m_ptr; 
            } m_firstChild; 
            struct Frame {} *m_lastChild; 
            unsigned int m_childCount; 
        } x3; struct FrameLoader { 
            int (**_vptr$FrameLoader)(); 
            struct Frame {} *m_frame; 
            struct FrameLoaderClient {} *m_client; 
            struct PolicyChecker { 
                struct Frame {} *m_frame; 
                boolm_delegateIsDecidingNavigationPolicy; 
                boolm_delegateIsHandlingUnimplementablePolicy; 
                int m_loadType; 
                struct PolicyCallback { 
                    struct ResourceRequest { 
                        struct KURL { 
                            struct String { 
                                struct RefPtr<WebCore::StringImpl> { 
                                    struct StringImpl {} *m_ptr; 
                                } m_impl; 
                            } m_string; 
                            unsigned int m_isValid : 1; 
                            unsigned int m_protocolInHTTPFamily : 1; 
                            int m_schemeEnd; 
                            int m_userStart; 
                            int m_userEnd; 
                            int m_passwordEnd; 
                            int m_hostEnd; 
                            int m_portEnd; 
                            int m_pathAfterLastSlash; 
                            int m_pathEnd; 
                            int m_queryEnd; 
                            int m_fragmentEnd; 
                        } m_url; 
                        int m_cachePolicy; 
                        double m_timeoutInterval; 
                        struct KURL { 
                            struct String { 
                                struct RefPtr<WebCore::StringImpl> { 
                                    struct StringImpl {} *m_ptr; 
                                } m_impl; 
                            } m_string; 
                            unsigned int m_isValid : 1; 
                            unsigned int m_protocolInHTTPFamily : 1; 
                            int m_schemeEnd; 
                            int m_userStart; 
                            int m_userEnd; 
                            int m_passwordEnd; 
                            int m_hostEnd; 
                            int m_portEnd; 
                            int m_pathAfterLastSlash; 
                            int m_pathEnd; 
                            int m_queryEnd; 
                            int m_fragmentEnd; 
                        } m_firstPartyForCookies; 
                        struct String { 
                            struct RefPtr<WebCore::StringImpl> { 
                                struct StringImpl {} *m_ptr; 
                            } m_impl; 
                        } m_httpMethod; 
                        struct HTTPHeaderMap { 
                            struct HashTable<WebCore::AtomicString,std::pair<WebCore::AtomicString, WebCore::String>,WTF::PairFirstExtractor<std::pair<WebCore::AtomicString, WebCore::String> >,WebCore::CaseFoldingHash,WTF::PairHashTraits<WTF::HashTraits<WebCore::AtomicString>, WTF::HashTraits<WebCore::String> >,WTF::HashTraits<WebCore::AtomicString> > { 
                                struct pair<WebCore::AtomicString,WebCore::String> {} *m_table; 
                                int m_tableSize; 
                                int m_tableSizeMask; 
                                int m_keyCount; 
                                int m_deletedCount; 
                            } m_impl; 
                        } m_httpHeaderFields; 
                        struct Vector<WebCore::String,0ul> { 
                            unsigned int m_size; 
                            struct VectorBuffer<WebCore::String,0ul> { 
                                struct String {} *m_buffer; 
                                unsigned int m_capacity; 
                            } m_buffer; 
                        } m_responseContentDispositionEncodingFallbackArray; 
                        struct RefPtr<WebCore::FormData> { 
                            struct FormData {} *m_ptr; 
                        } m_httpBody; 
                        boolm_allowCookies; 
                        boolm_resourceRequestUpdated; 
                        boolm_platformRequestUpdated; 
                        boolm_reportUploadProgress; 
                        int m_priority; 
                        int m_targetType; 
                        boolm_mainResourceRequest; 
                        struct RetainPtr<NSURLRequest> { 
                            NSURLRequest *m_ptr; 
                        } m_nsRequest; 
                    } m_request; 
                    struct RefPtr<WebCore::FormState> { 
                        struct FormState {} *m_ptr; 
                    } m_formState; 
                    struct String { 
                        struct RefPtr<WebCore::StringImpl> { 
                            struct StringImpl {} *m_ptr; 
                        } m_impl; 
                    } m_frameName; 
                    int (*m_navigationFunction)(); 
                    int (*m_newWindowFunction)(); 
                    int (*m_contentFunction)(); 
                    void *m_argument; 
                } m_callback; 
            } m_policyChecker; 
            struct HistoryController { 
                struct Frame {} *m_frame; 
                struct RefPtr<WebCore::HistoryItem> { 
                    struct HistoryItem {} *m_ptr; 
                } m_currentItem; 
                struct RefPtr<WebCore::HistoryItem> { 
                    struct HistoryItem {} *m_ptr; 
                } m_previousItem; 
                struct RefPtr<WebCore::HistoryItem> { 
                    struct HistoryItem {} *m_ptr; 
                } m_provisionalItem; 
            } m_history; 
            struct ResourceLoadNotifier { 
                struct Frame {} *m_frame; 
            } m_notifer; 
            struct DocumentWriter { 
                struct Frame {} *m_frame; 
                boolm_receivedData; 
                struct String { 
                    struct RefPtr<WebCore::StringImpl> { 
                        struct StringImpl {} *m_ptr; 
                    } m_impl; 
                } m_mimeType; 
                boolm_encodingWasChosenByUser; 
                struct String { 
                    struct RefPtr<WebCore::StringImpl> { 
                        struct StringImpl {} *m_ptr; 
                    } m_impl; 
                } m_encoding; 
                struct RefPtr<WebCore::TextResourceDecoder> { 
                    struct TextResourceDecoder {} *m_ptr; 
                } m_decoder; 
            } m_writer; 
            int m_state; 
            int m_loadType; 
            struct RefPtr<WebCore::DocumentLoader> { 
                struct DocumentLoader {} *m_ptr; 
            } m_documentLoader; 
            struct RefPtr<WebCore::DocumentLoader> { 
                struct DocumentLoader {} *m_ptr; 
            } m_provisionalDocumentLoader; 
            struct RefPtr<WebCore::DocumentLoader> { 
                struct DocumentLoader {} *m_ptr; 
            } m_policyDocumentLoader; 
            boolm_delegateIsHandlingProvisionalLoadError; 
            boolm_firstLayoutDone; 
            boolm_quickRedirectComing; 
            boolm_sentRedirectNotification; 
            boolm_inStopAllLoaders; 
            struct String { 
                struct RefPtr<WebCore::StringImpl> { 
                    struct StringImpl {} *m_ptr; 
                } m_impl; 
            } m_outgoingReferrer; 
            boolm_isExecutingJavaScriptFormAction; 
            boolm_didCallImplicitClose; 
            boolm_wasUnloadEventEmitted; 
            boolm_pageDismissalEventBeingDispatched; 
            boolm_isComplete; 
            boolm_isLoadingMainResource; 
            struct RefPtr<WebCore::SerializedScriptValue> { 
                struct SerializedScriptValue {} *m_ptr; 
            } m_pendingStateObject; 
            struct KURL { 
                struct String { 
                    struct RefPtr<WebCore::StringImpl> { 
                        struct StringImpl {} *m_ptr; 
                    } m_impl; 
                } m_string; 
                unsigned int m_isValid : 1; 
                unsigned int m_protocolInHTTPFamily : 1; 
                int m_schemeEnd; 
                int m_userStart; 
                int m_userEnd; 
                int m_passwordEnd; 
                int m_hostEnd; 
                int m_portEnd; 
                int m_pathAfterLastSlash; 
                int m_pathEnd; 
                int m_queryEnd; 
                int m_fragmentEnd; 
            } m_URL; 
            struct KURL { 
                struct String { 
                    struct RefPtr<WebCore::StringImpl> { 
                        struct StringImpl {} *m_ptr; 
                    } m_impl; 
                } m_string; 
                unsigned int m_isValid : 1; 
                unsigned int m_protocolInHTTPFamily : 1; 
                int m_schemeEnd; 
                int m_userStart; 
                int m_userEnd; 
                int m_passwordEnd; 
                int m_hostEnd; 
                int m_portEnd; 
                int m_pathAfterLastSlash; 
                int m_pathEnd; 
                int m_queryEnd; 
                int m_fragmentEnd; 
            } m_workingURL; 
            struct OwnPtr<WebCore::IconLoader> { 
                struct IconLoader {} *m_ptr; 
            } m_iconLoader; 
            boolm_mayLoadIconLater; 
            boolm_cancellingWithLoadInProgress; 
            boolm_needsClear; 
            boolm_receivedData; 
            boolm_containsPlugIns; 
            struct KURL { 
                struct String { 
                    struct RefPtr<WebCore::StringImpl> { 
                        struct StringImpl {} *m_ptr; 
                    } m_impl; 
                } m_string; 
                unsigned int m_isValid : 1; 
                unsigned int m_protocolInHTTPFamily : 1; 
                int m_schemeEnd; 
                int m_userStart; 
                int m_userEnd; 
                int m_passwordEnd; 
                int m_hostEnd; 
                int m_portEnd; 
                int m_pathAfterLastSlash; 
                int m_pathEnd; 
                int m_queryEnd; 
                int m_fragmentEnd; 
            } m_submittedFormURL; 
            struct Timer<WebCore::FrameLoader> { 
                int (**_vptr$TimerBase)(); 
                double m_nextFireTime; 
                double m_repeatInterval; 
                int m_heapIndex; 
                unsigned int m_heapInsertionOrder; 
                struct FrameLoader {} *m_object; 
                struct { 
                    /* Warning: Unrecognized filer type: '"' using 'void*' */ void**__pfn; 
                } m_function; 
            } m_checkTimer; 
            boolm_shouldCallCheckCompleted; 
            boolm_shouldCallCheckLoadComplete; 
            struct Frame {} *m_opener; 
            struct HashSet<WebCore::Frame*,WTF::PtrHash<WebCore::Frame*>,WTF::HashTraits<WebCore::Frame*> > { 
                struct HashTable<WebCore::Frame*,WebCore::Frame*,WTF::IdentityExtractor<WebCore::Frame*>,WTF::PtrHash<WebCore::Frame*>,WTF::HashTraits<WebCore::Frame*>,WTF::HashTraits<WebCore::Frame*> > { 
                    struct Frame {} **m_table; 
                    int m_tableSize; 
                    int m_tableSizeMask; 
                    int m_keyCount; 
                    int m_deletedCount; 
                } m_impl; 
            } m_openedFrames; 
            boolm_creatingInitialEmptyDocument; 
            boolm_isDisplayingInitialEmptyDocument; 
            boolm_committedFirstRealDocumentLoad; 
            boolm_didPerformFirstNavigation; 
            boolm_loadingFromCachedPage; 
            boolm_suppressOpenerInNewFrame; 
            int m_sandboxFlags; 
            int m_forcedSandboxFlags; 
            boolm_loadsSynchronously; 
        } x4; struct RedirectScheduler { 
            struct Frame {} *m_frame; 
            struct Timer<WebCore::RedirectScheduler> { 
                int (**_vptr$TimerBase)(); 
                double m_nextFireTime; 
                double m_repeatInterval; 
                int m_heapIndex; 
                unsigned int m_heapInsertionOrder; 
                struct RedirectScheduler {} *m_object; 
                struct { 
                    void**__pfn; 
                } m_function; 
            } m_timer; 
            struct OwnPtr<WebCore::ScheduledNavigation> { 
                struct ScheduledNavigation {} *m_ptr; 
            } m_redirect; 
        } x5; struct RefPtr<WebCore::DOMWindow> { 
            struct DOMWindow {} *m_ptr; 
        } x6; struct HashSet<WebCore::DOMWindow*,WTF::PtrHash<WebCore::DOMWindow*>,WTF::HashTraits<WebCore::DOMWindow*> > { 
            struct HashTable<WebCore::DOMWindow*,WebCore::DOMWindow*,WTF::IdentityExtractor<WebCore::DOMWindow*>,WTF::PtrHash<WebCore::DOMWindow*>,WTF::HashTraits<WebCore::DOMWindow*>,WTF::HashTraits<WebCore::DOMWindow*> > { 
                struct DOMWindow {} **m_table; 
                int m_tableSize; 
                int m_tableSizeMask; 
                int m_keyCount; 
                int m_deletedCount; 
            } m_impl; 
        } x7; struct HTMLFrameOwnerElement {} *x8; struct RefPtr<WebCore::FrameView> { 
            struct FrameView {} *m_ptr; 
        } x9; struct RefPtr<WebCore::Document> { 
            struct Document {} *m_ptr; 
        } x10; struct ScriptController { 
            struct HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld>,JSC::ProtectedPtr<WebCore::JSDOMWindowShell>,WTF::PtrHash<WTF::RefPtr<WebCore::DOMWrapperWorld> >,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld> >,WTF::HashTraits<JSC::ProtectedPtr<WebCore::JSDOMWindowShell> > > { 
                struct HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld>,std::pair<WTF::RefPtr<WebCore::DOMWrapperWorld>, JSC::ProtectedPtr<WebCore::JSDOMWindowShell> >,WTF::PairFirstExtractor<std::pair<WTF::RefPtr<WebCore::DOMWrapperWorld>, JSC::ProtectedPtr<WebCore::JSDOMWindowShell> > >,WTF::PtrHash<WTF::RefPtr<WebCore::DOMWrapperWorld> >,WTF::PairHashTraits<WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld> >, WTF::HashTraits<JSC::ProtectedPtr<WebCore::JSDOMWindowShell> > >,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld> > > { 
                    struct pair<WTF::RefPtr<WebCore::DOMWrapperWorld>,JSC::ProtectedPtr<WebCore::JSDOMWindowShell> > {} *m_table; 
                    int m_tableSize; 
                    int m_tableSizeMask; 
                    int m_keyCount; 
                    int m_deletedCount; 
                } m_impl; 
            } m_windowShells; 
            struct Frame {} *m_frame; 
            int m_handlerLineNumber; 
            struct String {} *m_sourceURL; 
            boolm_inExecuteScript; 
            boolm_processingTimerCallback; 
            boolm_paused; 
            boolm_allowPopupsFromPlugin; 
            struct RefPtr<JSC::Bindings::RootObject> { 
                struct RootObject {} *m_ptr; 
            } m_bindingRootObject; 
            struct HashMap<void*,WTF::RefPtr<JSC::Bindings::RootObject>,WTF::PtrHash<void*>,WTF::HashTraits<void*>,WTF::HashTraits<WTF::RefPtr<JSC::Bindings::RootObject> > > { 
                struct HashTable<void*,std::pair<void*, WTF::RefPtr<JSC::Bindings::RootObject> >,WTF::PairFirstExtractor<std::pair<void*, WTF::RefPtr<JSC::Bindings::RootObject> > >,WTF::PtrHash<void*>,WTF::PairHashTraits<WTF::HashTraits<void*>, WTF::HashTraits<WTF::RefPtr<JSC::Bindings::RootObject> > >,WTF::HashTraits<void*> > { 
                    struct pair<void*,WTF::RefPtr<JSC::Bindings::RootObject> > {} *m_table; 
                    int m_tableSize; 
                    int m_tableSizeMask; 
                    int m_keyCount; 
                    int m_deletedCount; 
                } m_impl; 
            } m_rootObjects; 
            struct RetainPtr<WebScriptObject> { 
                WebScriptObject *m_ptr; 
            } m_windowScriptObject; 
            struct OwnPtr<WebCore::XSSAuditor> { 
                struct XSSAuditor {} *m_ptr; 
            } m_XSSAuditor; 
        } x11; struct String { 
            struct RefPtr<WebCore::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } x12; struct String { 
            struct RefPtr<WebCore::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } x13; float x14; struct SelectionController { 
            struct Frame {} *m_frame; 
            int m_xPosForVerticalArrowNavigation; 
            struct VisibleSelection { 
                struct Position { 
                    struct RefPtr<WebCore::Node> { 
                        struct Node {} *m_ptr; 
                    } m_anchorNode; 
                    int m_offset; 
                    unsigned int m_anchorType : 2; 
                    unsigned int m_isLegacyEditingPosition : 1; 
                } m_base; 
                struct Position { 
                    struct RefPtr<WebCore::Node> { 
                        struct Node {} *m_ptr; 
                    } m_anchorNode; 
                    int m_offset; 
                    unsigned int m_anchorType : 2; 
                    unsigned int m_isLegacyEditingPosition : 1; 
                } m_extent; 
                struct Position { 
                    struct RefPtr<WebCore::Node> { 
                        struct Node {} *m_ptr; 
                    } m_anchorNode; 
                    int m_offset; 
                    unsigned int m_anchorType : 2; 
                    unsigned int m_isLegacyEditingPosition : 1; 
                } m_start; 
                struct Position { 
                    struct RefPtr<WebCore::Node> { 
                        struct Node {} *m_ptr; 
                    } m_anchorNode; 
                    int m_offset; 
                    unsigned int m_anchorType : 2; 
                    unsigned int m_isLegacyEditingPosition : 1; 
                } m_end; 
                int m_affinity; 
                int m_selectionType; 
                boolm_baseIsFirst; 
            } m_selection; 
            int m_granularity; 
            struct Timer<WebCore::SelectionController> { 
                int (**_vptr$TimerBase)(); 
                double m_nextFireTime; 
                double m_repeatInterval; 
                int m_heapIndex; 
                unsigned int m_heapInsertionOrder; 
                struct SelectionController {} *m_object; 
                struct { 
                    void**__pfn; 
                } m_function; 
            } m_caretBlinkTimer; 
            struct IntRect { 
                struct IntPoint { 
                    int m_x; 
                    int m_y; 
                } m_location; 
                struct IntSize { 
                    int m_width; 
                    int m_height; 
                } m_size; 
            } m_caretRect; 
            struct IntRect { 
                struct IntPoint { 
                    int m_x; 
                    int m_y; 
                } m_location; 
                struct IntSize { 
                    int m_width; 
                    int m_height; 
                } m_size; 
            } m_absCaretBounds; 
            struct IntRect { 
                struct IntPoint { 
                    int m_x; 
                    int m_y; 
                } m_location; 
                struct IntSize { 
                    int m_width; 
                    int m_height; 
                } m_size; 
            } m_absoluteCaretRepaintBounds; 
            boolm_needsLayout; 
            boolm_absCaretBoundsDirty; 
            boolm_isDirectional; 
            boolm_isDragCaretController; 
            boolm_isCaretBlinkingSuspended; 
            boolm_focused; 
            boolm_caretVisible; 
            boolm_caretPaint; 
            boolm_updateAppearanceEnabled; 
            boolm_caretBlinks; 
            struct Color { 
                unsigned int m_color; 
                boolm_valid; 
            } m_caretColor; 
            int m_closeTypingSuppressions; 
        } x15; struct VisibleSelection { 
            struct Position { 
                struct RefPtr<WebCore::Node> { 
                    struct Node {} *m_ptr; 
                } m_anchorNode; 
                int m_offset; 
                unsigned int m_anchorType : 2; 
                unsigned int m_isLegacyEditingPosition : 1; 
            } m_base; 
            struct Position { 
                struct RefPtr<WebCore::Node> { 
                    struct Node {} *m_ptr; 
                } m_anchorNode; 
                int m_offset; 
                unsigned int m_anchorType : 2; 
                unsigned int m_isLegacyEditingPosition : 1; 
            } m_extent; 
            struct Position { 
                struct RefPtr<WebCore::Node> { 
                    struct Node {} *m_ptr; 
                } m_anchorNode; 
                int m_offset; 
                unsigned int m_anchorType : 2; 
                unsigned int m_isLegacyEditingPosition : 1; 
            } m_start; 
            struct Position { 
                struct RefPtr<WebCore::Node> { 
                    struct Node {} *m_ptr; 
                } m_anchorNode; 
                int m_offset; 
                unsigned int m_anchorType : 2; 
                unsigned int m_isLegacyEditingPosition : 1; 
            } m_end; 
            int m_affinity; 
            int m_selectionType; 
            boolm_baseIsFirst; 
        } x16; struct Editor { 
            struct Frame {} *m_frame; 
            struct OwnPtr<WebCore::DeleteButtonController> { 
                struct DeleteButtonController {} *m_ptr; 
            } m_deleteButtonController; 
            struct RefPtr<WebCore::EditCommand> { 
                struct EditCommand {} *m_ptr; 
            } m_lastEditCommand; 
            struct RefPtr<WebCore::Node> { 
                struct Node {} *m_ptr; 
            } m_removedAnchor; 
            struct RefPtr<WebCore::Text> { 
                struct Text {} *m_ptr; 
            } m_compositionNode; 
            unsigned int m_compositionStart; 
            unsigned int m_compositionEnd; 
            struct Vector<WebCore::CompositionUnderline,0ul> { 
                unsigned int m_size; 
                struct VectorBuffer<WebCore::CompositionUnderline,0ul> { 
                    struct CompositionUnderline {} *m_buffer; 
                    unsigned int m_capacity; 
                } m_buffer; 
            } m_customCompositionUnderlines; 
            boolm_ignoreCompositionSelectionChange; 
            boolm_shouldStartNewKillRingSequence; 
            boolm_shouldStyleWithCSS; 
        } x17; struct EventHandler { 
            struct Frame {} *m_frame; 
            boolm_mousePressed; 
            boolm_capturesDragging; 
            struct RefPtr<WebCore::Node> { 
                struct Node {} *m_ptr; 
            } m_mousePressNode; 
            boolm_mouseDownMayStartSelect; 
            boolm_mouseDownWasSingleClickInSelection; 
            boolm_beganSelectingText; 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } m_panScrollStartPos; 
            boolm_panScrollInProgress; 
            boolm_panScrollButtonPressed; 
            boolm_springLoadedPanScrollInProgress; 
            struct Timer<WebCore::EventHandler> { 
                int (**_vptr$TimerBase)(); 
                double m_nextFireTime; 
                double m_repeatInterval; 
                int m_heapIndex; 
                unsigned int m_heapInsertionOrder; 
                struct EventHandler {} *m_object; 
                struct { 
                    void**__pfn; 
                } m_function; 
            } m_hoverTimer; 
            struct Timer<WebCore::EventHandler> { 
                int (**_vptr$TimerBase)(); 
                double m_nextFireTime; 
                double m_repeatInterval; 
                int m_heapIndex; 
                unsigned int m_heapInsertionOrder; 
                struct EventHandler {} *m_object; 
                struct { 
                    void**__pfn; 
                } m_function; 
            } m_autoscrollTimer; 
            struct RenderObject {} *m_autoscrollRenderer; 
            boolm_autoscrollInProgress; 
            boolm_mouseDownMayStartAutoscroll; 
            boolm_mouseDownWasInSubframe; 
            struct Timer<WebCore::EventHandler> { 
                int (**_vptr$TimerBase)(); 
                double m_nextFireTime; 
                double m_repeatInterval; 
                int m_heapIndex; 
                unsigned int m_heapInsertionOrder; 
                struct EventHandler {} *m_object; 
                struct { 
                    void**__pfn; 
                } m_function; 
            } m_fakeMouseMoveEventTimer; 
            boolm_svgPan; 
            struct RefPtr<WebCore::SVGElementInstance> { 
                struct SVGElementInstance {} *m_ptr; 
            } m_instanceUnderMouse; 
            struct RefPtr<WebCore::SVGElementInstance> { 
                struct SVGElementInstance {} *m_ptr; 
            } m_lastInstanceUnderMouse; 
            struct RenderLayer {} *m_resizeLayer; 
            struct RefPtr<WebCore::Node> { 
                struct Node {} *m_ptr; 
            } m_capturingMouseEventsNode; 
            struct RefPtr<WebCore::Node> { 
                struct Node {} *m_ptr; 
            } m_nodeUnderMouse; 
            struct RefPtr<WebCore::Node> { 
                struct Node {} *m_ptr; 
            } m_lastNodeUnderMouse; 
            struct RefPtr<WebCore::Frame> { 
                struct Frame {} *m_ptr; 
            } m_lastMouseMoveEventSubframe; 
            struct RefPtr<WebCore::Scrollbar> { 
                struct Scrollbar {} *m_ptr; 
            } m_lastScrollbarUnderMouse; 
            int m_clickCount; 
            struct RefPtr<WebCore::Node> { 
                struct Node {} *m_ptr; 
            } m_clickNode; 
            float m_gestureInitialDiameter; 
            float m_gestureLastDiameter; 
            float m_gestureInitialRotation; 
            float m_gestureLastRotation; 
            unsigned int m_firstTouchID; 
            struct HashMap<unsigned int,WTF::RefPtr<WebCore::Touch>,WTF::IntHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebCore::Touch> > > { 
                struct HashTable<unsigned int,std::pair<unsigned int, WTF::RefPtr<WebCore::Touch> >,WTF::PairFirstExtractor<std::pair<unsigned int, WTF::RefPtr<WebCore::Touch> > >,WTF::IntHash<unsigned int>,WTF::PairHashTraits<WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::RefPtr<WebCore::Touch> > >,WTF::HashTraits<unsigned int> > { 
                    struct pair<unsigned int,WTF::RefPtr<WebCore::Touch> > {} *m_table; 
                    int m_tableSize; 
                    int m_tableSizeMask; 
                    int m_keyCount; 
                    int m_deletedCount; 
                } m_impl; 
            } m_touchesByID; 
            struct HashSet<WTF::RefPtr<WebCore::EventTarget>,WTF::PtrHash<WTF::RefPtr<WebCore::EventTarget> >,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget> > > { 
                struct HashTable<WTF::RefPtr<WebCore::EventTarget>,WTF::RefPtr<WebCore::EventTarget>,WTF::IdentityExtractor<WTF::RefPtr<WebCore::EventTarget> >,WTF::PtrHash<WTF::RefPtr<WebCore::EventTarget> >,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget> >,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget> > > { 
                    struct RefPtr<WebCore::EventTarget> {} *m_table; 
                    int m_tableSize; 
                    int m_tableSizeMask; 
                    int m_keyCount; 
                    int m_deletedCount; 
                } m_impl; 
            } m_gestureTargets; 
            struct RefPtr<WebCore::Frame> { 
                struct Frame {} *m_ptr; 
            } m_touchEventTargetSubframe; 
            struct RefPtr<WebCore::HTMLFrameSetElement> { 
                struct HTMLFrameSetElement {} *m_ptr; 
            } m_frameSetBeingResized; 
            struct IntSize { 
                int m_width; 
                int m_height; 
            } m_offsetFromResizeCorner; 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } m_currentMousePosition; 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } m_mouseDownPos; 
            double m_mouseDownTimestamp; 
            struct PlatformMouseEvent { 
                struct IntPoint { 
                    int m_x; 
                    int m_y; 
                } m_position; 
                struct IntPoint { 
                    int m_x; 
                    int m_y; 
                } m_globalPosition; 
                int m_button; 
                int m_eventType; 
                int m_clickCount; 
                boolm_shiftKey; 
                boolm_ctrlKey; 
                boolm_altKey; 
                boolm_metaKey; 
                double m_timestamp; 
                unsigned int m_modifierFlags; 
            } m_mouseDown; 
            boolm_useLatchedWheelEventNode; 
            struct RefPtr<WebCore::Node> { 
                struct Node {} *m_ptr; 
            } m_latchedWheelEventNode; 
            boolm_widgetIsLatched; 
            struct RefPtr<WebCore::Node> { 
                struct Node {} *m_ptr; 
            } m_previousWheelScrolledNode; 
            WAKView *m_mouseDownView; 
            boolm_sendingEventToSubview; 
        } x18; struct AnimationController { 
            struct AnimationControllerPrivate {} *m_data; 
        } x19; struct RefPtr<WebCore::CSSMutableStyleDeclaration> { 
            struct CSSMutableStyleDeclaration {} *m_ptr; 
        } x20; struct Timer<WebCore::Frame> { 
            int (**_vptr$TimerBase)(); 
            double m_nextFireTime; 
            double m_repeatInterval; 
            int m_heapIndex; 
            unsigned int m_heapInsertionOrder; 
            struct Frame {} *m_object; 
            struct { 
                void**__pfn; 
            } m_function; 
        } x21; float x22; struct IntPoint { 
            int m_x; 
            int m_y; 
        } x23; struct ViewportArguments { 
            float initialScale; 
            float minimumScale; 
            float maximumScale; 
            float width; 
            float height; 
            float userScalable; 
        } x24; boolx25; struct VisibleSelection { 
            struct Position { 
                struct RefPtr<WebCore::Node> { 
                    struct Node {} *m_ptr; 
                } m_anchorNode; 
                int m_offset; 
                unsigned int m_anchorType : 2; 
                unsigned int m_isLegacyEditingPosition : 1; 
            } m_base; 
            struct Position { 
                struct RefPtr<WebCore::Node> { 
                    struct Node {} *m_ptr; 
                } m_anchorNode; 
                int m_offset; 
                unsigned int m_anchorType : 2; 
                unsigned int m_isLegacyEditingPosition : 1; 
            } m_extent; 
            struct Position { 
                struct RefPtr<WebCore::Node> { 
                    struct Node {} *m_ptr; 
                } m_anchorNode; 
                int m_offset; 
                unsigned int m_anchorType : 2; 
                unsigned int m_isLegacyEditingPosition : 1; 
            } m_start; 
            struct Position { 
                struct RefPtr<WebCore::Node> { 
                    struct Node {} *m_ptr; 
                } m_anchorNode; 
                int m_offset; 
                unsigned int m_anchorType : 2; 
                unsigned int m_isLegacyEditingPosition : 1; 
            } m_end; 
            int m_affinity; 
            int m_selectionType; 
            boolm_baseIsFirst; 
        } x26; struct VisibleSelection { 
            struct Position { 
                struct RefPtr<WebCore::Node> { 
                    struct Node {} *m_ptr; 
                } m_anchorNode; 
                int m_offset; 
                unsigned int m_anchorType : 2; 
                unsigned int m_isLegacyEditingPosition : 1; 
            } m_base; 
            struct Position { 
                struct RefPtr<WebCore::Node> { 
                    struct Node {} *m_ptr; 
                } m_anchorNode; 
                int m_offset; 
                unsigned int m_anchorType : 2; 
                unsigned int m_isLegacyEditingPosition : 1; 
            } m_extent; 
            struct Position { 
                struct RefPtr<WebCore::Node> { 
                    struct Node {} *m_ptr; 
                } m_anchorNode; 
                int m_offset; 
                unsigned int m_anchorType : 2; 
                unsigned int m_isLegacyEditingPosition : 1; 
            } m_start; 
            struct Position { 
                struct RefPtr<WebCore::Node> { 
                    struct Node {} *m_ptr; 
                } m_anchorNode; 
                int m_offset; 
                unsigned int m_anchorType : 2; 
                unsigned int m_isLegacyEditingPosition : 1; 
            } m_end; 
            int m_affinity; 
            int m_selectionType; 
            boolm_baseIsFirst; 
        } x27; struct FloatSize { 
            float m_width; 
            float m_height; 
        } x28; unsigned int x29; unsigned int x30; unsigned int x31; double x32; double x33; struct Timer<WebCore::Frame> { 
            int (**_vptr$TimerBase)(); 
            double m_nextFireTime; 
            double m_repeatInterval; 
            int m_heapIndex; 
            unsigned int m_heapInsertionOrder; 
            struct Frame {} *m_object; 
            struct { 
                void**__pfn; 
            } m_function; 
        } x34; int x35; boolx36; boolx37; boolx38; boolx39; boolx40; boolx41; int x42; } *coreFrame;

    WebFrameView *webFrameView;
    struct WebScriptDebugger { int (**x1)(); struct HashSet<JSC::JSGlobalObject*,WTF::PtrHash<JSC::JSGlobalObject*>,WTF::HashTraits<JSC::JSGlobalObject*> > { 
            struct HashTable<JSC::JSGlobalObject*,JSC::JSGlobalObject*,WTF::IdentityExtractor<JSC::JSGlobalObject*>,WTF::PtrHash<JSC::JSGlobalObject*>,WTF::HashTraits<JSC::JSGlobalObject*>,WTF::HashTraits<JSC::JSGlobalObject*> > { 
                struct JSGlobalObject {} **m_table; 
                int m_tableSize; 
                int m_tableSizeMask; 
                int m_keyCount; 
                int m_deletedCount; 
            } m_impl; 
        } x2; boolx3; struct RetainPtr<WebScriptCallFrame> { 
            WebScriptCallFrame *m_ptr; 
        } x4; struct ProtectedPtr<JSC::JSGlobalObject> { 
            struct JSGlobalObject {} *m_ptr; 
        } x5; struct RetainPtr<WebScriptCallFrame> { 
            WebScriptCallFrame *m_ptr; 
        } x6; } *scriptDebugger;
    id internalLoadDelegate;
    BOOL shouldCreateRenderers;
    BOOL includedInWebKitStatistics;
    BOOL isCommitting;
    BOOL isSingleLine;
}


- (void)setWebFrameView:(id)arg1;
- (void)finalize;
- (void)dealloc;

@end
