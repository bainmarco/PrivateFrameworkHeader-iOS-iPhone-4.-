/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/OfficeImport.framework/OfficeImport
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class EBReaderSheetState;

@interface CHBReaderState : CHBState  {
    EBReaderSheetState *mEBReaderSheetState;
    struct XlChartBinaryReader { int (**x1)(); int (**x2)(); int (**x3)(); struct EshObjectFactory {} *x4; boolx5; struct SsrwOORootStorage {} *x6; struct SsrwOOStorage {} *x7; struct XlEshBinaryReader { 
            int (**_vptr$EshBinaryReader)(); 
            struct SsrwOOStream {} *m_pStream; 
            struct EshParserVisitor {} *m_pParserVisitor; 
            struct EshObjectFactory {} *m_pObjectFactory; 
            unsigned int m_ulStartPos; 
            unsigned int m_ulEndPos; 
            struct ChStack<EshHeader> { 
                struct EshHeader {} *m_stack; 
                struct EshHeader {} *m_tmpStack; 
                unsigned int m_count; 
                unsigned int m_size; 
                unsigned int m_blockSize; 
            } m_containers; 
            unsigned int m_ulCrtPos; 
            struct EshHeader { 
                int m_lLength; 
                unsigned int m_ulOffset; 
                short m_nInstance; 
                unsigned short m_unType; 
                unsigned char m_bVersion; 
            } m_nextHeader; 
            boolm_isLowLevel; 
            boolm_isPatriarchRead; 
            unsigned int m_ulFragmentBoundary; 
            struct XlReadStgStream {} *m_pBiffStream; 
        } x8; struct XlStringExtractor {} *x9; struct XlSheetInfoTable {} *x10; int x11; int x12; int x13; int x14; int x15; int x16; int x17; int x18; int x19; int x20; int x21; int x22; int x23; int x24; int x25; int x26; int x27; int x28; int x29; int x30; int x31; int x32; int x33; int x34; int x35; int x36; int x37; int x38; int x39; int x40; boolx41; boolx42; boolx43; struct ChVector<long int> { 
            long *m_vector; 
            long *m_tmpVector; 
            unsigned int m_count; 
            unsigned int m_size; 
            unsigned int m_blockSize; 
        } x44; struct ChVector<long int> { 
            long *m_vector; 
            long *m_tmpVector; 
            unsigned int m_count; 
            unsigned int m_size; 
            unsigned int m_blockSize; 
        } x45; struct ChVector<long int> { 
            long *m_vector; 
            long *m_tmpVector; 
            unsigned int m_count; 
            unsigned int m_size; 
            unsigned int m_blockSize; 
        } x46; struct XlIndex {} *x47; struct XlRow {} *x48; struct XlRecord {} *x49; int x50; int x51; short x52; int x53; int x54; struct ChVector<XlCell*> { 
            struct XlCell {} **m_vector; 
            struct XlCell {} **m_tmpVector; 
            unsigned int m_count; 
            unsigned int m_size; 
            unsigned int m_blockSize; 
        } x55; int x56; unsigned char x57; int x58; struct XlWorksheetProperties { 
            int (**_vptr$XlWorksheetProperties)(); 
            unsigned short m_unDefaultColWidth; 
            int m_lStandardColWidth; 
            unsigned short m_unDefaultRowHeight; 
            boolm_isGridChanged; 
            unsigned short m_unRowGutter; 
            unsigned short m_unColGutter; 
            unsigned short m_unRowOutlineMax; 
            unsigned short m_unColOutlineMax; 
            boolm_isUndefRowUnsynced; 
            boolm_isUndefRowZero; 
            boolm_isUndefRowExAscent; 
            boolm_isUndefRowExDescent; 
            boolm_isShowAutoPgBreaks; 
            boolm_isIntlMacro; 
            boolm_isDialog; 
            boolm_isOutlineAutoStyle; 
            boolm_isRowSumsBelow; 
            boolm_isColSumsRight; 
            boolm_isFitToPage; 
            boolm_isDisplayGuts; 
            boolm_isAltExprEval; 
            boolm_isAltFmlaEntry; 
            boolm_isPrintHeadings; 
            boolm_isPrintGrid; 
            short m_nTabColorIdx; 
            struct ChVector<XlBrk*> { 
                struct XlBrk {} **m_vector; 
                struct XlBrk {} **m_tmpVector; 
                unsigned int m_count; 
                unsigned int m_size; 
                unsigned int m_blockSize; 
            } m_pHorizPgBreaks; 
            struct ChVector<XlBrk*> { 
                struct XlBrk {} **m_vector; 
                struct XlBrk {} **m_tmpVector; 
                unsigned int m_count; 
                unsigned int m_size; 
                unsigned int m_blockSize; 
            } m_pVertPgBreaks; 
            struct OcText { 
                int (**_vptr$OcText)(); 
                int m_encoding; 
                unsigned int m_ulStartCP; 
                unsigned int m_ulCharacterCount; 
                unsigned int m_ulBufferSize; 
                char *m_pBuffer; 
                char *m_pTempBuffer; 
                boolm_isMyBuffer; 
            } m_objectName; 
        } x59; struct XlWorksheetProtection { 
            int (**_vptr$XlWorksheetProtection)(); 
            boolm_isLockContent; 
            boolm_isLockScenario; 
            boolm_isLockObj; 
            boolm_isEditObjects; 
            boolm_isEditScenarios; 
            boolm_isChangeCellFormatting; 
            boolm_isChangeColumnFormatting; 
            boolm_isChangeRowFormatting; 
            boolm_isInsertColumns; 
            boolm_isInsertRow; 
            boolm_isInsertHyperlinks; 
            boolm_isDeleteColumns; 
            boolm_isDeleteRows; 
            boolm_isSelectLockedCells; 
            boolm_isSortCellRange; 
            boolm_isEditAutoFilters; 
            boolm_isEditPivotTables; 
            boolm_isSelectUnlockedCells; 
            short m_nPassword; 
        } x60; struct XlCalculationProperties { 
            int (**_vptr$XlCalculationProperties)(); 
            double m_dIncrementMax; 
            int m_autoRecalcMode; 
            short m_nIterationMax; 
            boolm_isIterationOn; 
            int m_referenceStyle; 
            boolm_isRecalcSave; 
        } x61; struct XlSortInfo { 
            int (**_vptr$XlSortInfo)(); 
            boolm_isSortLtoR; 
            boolm_isKey1Dsc; 
            boolm_isKey2Dsc; 
            boolm_isKey3Dsc; 
            boolm_isCaseSensitive; 
            boolm_isAltMethod; 
            unsigned char m_bOrderIndex; 
            struct OcText { 
                int (**_vptr$OcText)(); 
                int m_encoding; 
                unsigned int m_ulStartCP; 
                unsigned int m_ulCharacterCount; 
                unsigned int m_ulBufferSize; 
                char *m_pBuffer; 
                char *m_pTempBuffer; 
                boolm_isMyBuffer; 
            } m_key1String; 
            struct OcText { 
                int (**_vptr$OcText)(); 
                int m_encoding; 
                unsigned int m_ulStartCP; 
                unsigned int m_ulCharacterCount; 
                unsigned int m_ulBufferSize; 
                char *m_pBuffer; 
                char *m_pTempBuffer; 
                boolm_isMyBuffer; 
            } m_key2String; 
            struct OcText { 
                int (**_vptr$OcText)(); 
                int m_encoding; 
                unsigned int m_ulStartCP; 
                unsigned int m_ulCharacterCount; 
                unsigned int m_ulBufferSize; 
                char *m_pBuffer; 
                char *m_pTempBuffer; 
                boolm_isMyBuffer; 
            } m_key3String; 
        } x62; struct XlDocumentInfo { 
            int (**_vptr$XlDocumentInfo)(); 
            unsigned short m_unBuildID; 
            unsigned short m_unBuildYear; 
            int m_lLowestVersion; 
            boolm_isWrittenByWin; 
            boolm_isWrittenByRisc; 
            boolm_isWrittenByBeta; 
            boolm_isEditedByWin; 
            boolm_isEditedByMac; 
            boolm_isEditedByBeta; 
            boolm_isEditedByRisc; 
            boolm_is0x40; 
        } x63; struct XlDocumentProtection { 
            int (**_vptr$XlDocumentProtection)(); 
            boolm_isLockContent; 
            boolm_isLockWindow; 
            boolm_isLockShare; 
            short m_nPassword; 
            short m_nSharePassword; 
        } x64; struct XlFileProtection { 
            int (**_vptr$XlFileProtection)(); 
            int m_lFilePassword; 
            boolm_isWriteProtected; 
            boolm_isReadOnlyLoad; 
            short m_nWritePassword; 
            struct OcText { 
                int (**_vptr$OcText)(); 
                int m_encoding; 
                unsigned int m_ulStartCP; 
                unsigned int m_ulCharacterCount; 
                unsigned int m_ulBufferSize; 
                char *m_pBuffer; 
                char *m_pTempBuffer; 
                boolm_isMyBuffer; 
            } m_creatorName; 
            struct OcText { 
                int (**_vptr$OcText)(); 
                int m_encoding; 
                unsigned int m_ulStartCP; 
                unsigned int m_ulCharacterCount; 
                unsigned int m_ulBufferSize; 
                char *m_pBuffer; 
                char *m_pTempBuffer; 
                boolm_isMyBuffer; 
            } m_ownerName; 
            char *m_pTempBuffer; 
        } x65; int x66; int x67; struct XlDocumentProperties { 
            int (**_vptr$XlDocumentProperties)(); 
            unsigned short m_unDateBase; 
            short m_nCodePage; 
            int m_nCountry; 
            boolm_isExcel9File; 
            boolm_isUsingElfs; 
            boolm_isFullPrecision; 
            boolm_isRefreshAll; 
            boolm_isNoSaveSupp; 
            boolm_hasMailEnvelope; 
            boolm_isMailEnvelopeVisible; 
            boolm_isVBProject; 
            int m_lRecalcEngineID; 
            short m_nTabCount; 
            short *m_pTabIdTable; 
            struct OcText { 
                int (**_vptr$OcText)(); 
                int m_encoding; 
                unsigned int m_ulStartCP; 
                unsigned int m_ulCharacterCount; 
                unsigned int m_ulBufferSize; 
                char *m_pBuffer; 
                char *m_pTempBuffer; 
                boolm_isMyBuffer; 
            } m_workbookName; 
            int m_objectShow; 
            struct XlRef { 
                unsigned short m_nRowFirst; 
                unsigned short m_nRowLast; 
                short m_nColFirst; 
                short m_nColLast; 
                boolm_isCompact; 
            } m_oleSize; 
            boolm_isHaveOleSize; 
        } x68; struct XlSubstreamProperties { 
            int (**_vptr$XlSubstreamProperties)(); 
            struct XlSheetInfo { 
                int (**_vptr$XlSheetInfo)(); 
                int m_substreamType; 
                int m_lRowBlockCount; 
            } m_subStreamInfo; 
            struct XlPageProperties { 
                int (**_vptr$XlPageProperties)(); 
                double m_dBottomMargin; 
                double m_dTopMargin; 
                double m_dLeftMargin; 
                double m_dRightMargin; 
                struct OcText {} *m_pHeaderString; 
                struct OcText {} *m_pFooterString; 
                boolm_isHorizCentered; 
                boolm_isVertCentered; 
                short m_nPaperSize; 
                short m_nScaleFactor; 
                short m_nPageStartNumber; 
                short m_nPrintFitToWidth; 
                short m_nPrintFitToHeight; 
                boolm_isPrintLeftToRight; 
                int m_printLandscape; 
                boolm_isPrintNoPls; 
                boolm_isPrintNoColor; 
                boolm_isPrintDraft; 
                boolm_isPrintNotes; 
                boolm_isPrintNoOrient; 
                boolm_isPrintPageNoAuto; 
                short m_nPrintResolution; 
                short m_nPrintVertResolution; 
                short m_nPrintCopyCount; 
                double m_dPrintHeaderMargin; 
                double m_dPrintFooterMargin; 
                short m_nPrintSize; 
            } m_pageInfo; 
            struct XlCellTableInfo { 
                int (**_vptr$XlCellTableInfo)(); 
                int m_lRowMin; 
                int m_lRowMax; 
                unsigned short m_unColumnMin; 
                unsigned short m_unColumnMax; 
            } m_cellTableInfo; 
            int m_lGraphicsLoc; 
            int m_lEsherLoc; 
        } x69; struct XlRecord {} *x70; struct SsrwOOStream {} *x71; unsigned char x72; struct XlObjectFactory {} *x73; struct XlParserVisitor {} *x74; boolx75; int (**x76)(); struct EshObjectFactory {} *x77; struct ChVector<long int> { 
            long *m_vector; 
            long *m_tmpVector; 
            unsigned int m_count; 
            unsigned int m_size; 
            unsigned int m_blockSize; 
        } x78; struct XlSubstreamProperties { 
            int (**_vptr$XlSubstreamProperties)(); 
            struct XlSheetInfo { 
                int (**_vptr$XlSheetInfo)(); 
                int m_substreamType; 
                int m_lRowBlockCount; 
            } m_subStreamInfo; 
            struct XlPageProperties { 
                int (**_vptr$XlPageProperties)(); 
                double m_dBottomMargin; 
                double m_dTopMargin; 
                double m_dLeftMargin; 
                double m_dRightMargin; 
                struct OcText {} *m_pHeaderString; 
                struct OcText {} *m_pFooterString; 
                boolm_isHorizCentered; 
                boolm_isVertCentered; 
                short m_nPaperSize; 
                short m_nScaleFactor; 
                short m_nPageStartNumber; 
                short m_nPrintFitToWidth; 
                short m_nPrintFitToHeight; 
                boolm_isPrintLeftToRight; 
                int m_printLandscape; 
                boolm_isPrintNoPls; 
                boolm_isPrintNoColor; 
                boolm_isPrintDraft; 
                boolm_isPrintNotes; 
                boolm_isPrintNoOrient; 
                boolm_isPrintPageNoAuto; 
                short m_nPrintResolution; 
                short m_nPrintVertResolution; 
                short m_nPrintCopyCount; 
                double m_dPrintHeaderMargin; 
                double m_dPrintFooterMargin; 
                short m_nPrintSize; 
            } m_pageInfo; 
            struct XlCellTableInfo { 
                int (**_vptr$XlCellTableInfo)(); 
                int m_lRowMin; 
                int m_lRowMax; 
                unsigned short m_unColumnMin; 
                unsigned short m_unColumnMax; 
            } m_cellTableInfo; 
            int m_lGraphicsLoc; 
            int m_lEsherLoc; 
        } x79; int x80; int x81; int x82; struct CsRect<float> { 
            float m_data[4]; 
        } x83; int x84; int x85; int x86[4]; int x87; int x88; int x89; int x90; int x91; struct ChVector<long int> { 
            long *m_vector; 
            long *m_tmpVector; 
            unsigned int m_count; 
            unsigned int m_size; 
            unsigned int m_blockSize; 
        } x92; int x93[4]; int x94; int x95; struct AxisParentChildren { 
            int m_lXAxisLoc; 
            int m_lYAxisLoc; 
            int m_lZAxisLoc; 
            int m_lFrameLoc; 
            struct ChVector<long int> { 
                long *m_vector; 
                long *m_tmpVector; 
                unsigned int m_count; 
                unsigned int m_size; 
                unsigned int m_blockSize; 
            } m_chartFormatLoc; 
            int m_lXAxisTitleLoc; 
            int m_lYAxisTitleLoc; 
            int m_lZAxisTitleLoc; 
        } x96; struct AxisParentChildren { 
            int m_lXAxisLoc; 
            int m_lYAxisLoc; 
            int m_lZAxisLoc; 
            int m_lFrameLoc; 
            struct ChVector<long int> { 
                long *m_vector; 
                long *m_tmpVector; 
                unsigned int m_count; 
                unsigned int m_size; 
                unsigned int m_blockSize; 
            } m_chartFormatLoc; 
            int m_lXAxisTitleLoc; 
            int m_lYAxisTitleLoc; 
            int m_lZAxisTitleLoc; 
        } x97; struct ChVector<XlChartBinaryReader::SeriesDescriptor> { 
            struct SeriesDescriptor {} *m_vector; 
            struct SeriesDescriptor {} *m_tmpVector; 
            unsigned int m_count; 
            unsigned int m_size; 
            unsigned int m_blockSize; 
        } x98; struct ChVector<XlChartBinaryReader::PlotDescriptor> { 
            struct PlotDescriptor {} *m_vector; 
            struct PlotDescriptor {} *m_tmpVector; 
            unsigned int m_count; 
            unsigned int m_size; 
            unsigned int m_blockSize; 
        } x99; struct ChMap<long unsigned int,long int,CsLess<long unsigned int> > { 
            struct map<long unsigned int,long int,CsLess<long unsigned int>,std::allocator<std::pair<const long unsigned int, long int> > > { 
                struct _Rb_tree<long unsigned int,std::pair<const long unsigned int, long int>,std::_Select1st<std::pair<const long unsigned int, long int> >,CsLess<long unsigned int>,std::allocator<std::pair<const long unsigned int, long int> > > { 
                    struct _Rb_tree_impl<CsLess<long unsigned int>,false> { 
                        struct CsLess<long unsigned int> { } _M_key_compare; 
                        struct _Rb_tree_node_base { 
                            int _M_color; 
                            struct _Rb_tree_node_base {} *_M_parent; 
                            struct _Rb_tree_node_base {} *_M_left; 
                            struct _Rb_tree_node_base {} *_M_right; 
                        } _M_header; 
                        unsigned int _M_node_count; 
                    } _M_impl; 
                } _M_t; 
            } m_map; 
        } x100; struct ChMap<long unsigned int,long int,CsLess<long unsigned int> > { 
            struct map<long unsigned int,long int,CsLess<long unsigned int>,std::allocator<std::pair<const long unsigned int, long int> > > { 
                struct _Rb_tree<long unsigned int,std::pair<const long unsigned int, long int>,std::_Select1st<std::pair<const long unsigned int, long int> >,CsLess<long unsigned int>,std::allocator<std::pair<const long unsigned int, long int> > > { 
                    struct _Rb_tree_impl<CsLess<long unsigned int>,false> { 
                        struct CsLess<long unsigned int> { } _M_key_compare; 
                        struct _Rb_tree_node_base { 
                            int _M_color; 
                            struct _Rb_tree_node_base {} *_M_parent; 
                            struct _Rb_tree_node_base {} *_M_left; 
                            struct _Rb_tree_node_base {} *_M_right; 
                        } _M_header; 
                        unsigned int _M_node_count; 
                    } _M_impl; 
                } _M_t; 
            } m_map; 
        } x101; unsigned short x102; struct ChMap<long unsigned int,long int,CsLess<long unsigned int> > { 
            struct map<long unsigned int,long int,CsLess<long unsigned int>,std::allocator<std::pair<const long unsigned int, long int> > > { 
                struct _Rb_tree<long unsigned int,std::pair<const long unsigned int, long int>,std::_Select1st<std::pair<const long unsigned int, long int> >,CsLess<long unsigned int>,std::allocator<std::pair<const long unsigned int, long int> > > { 
                    struct _Rb_tree_impl<CsLess<long unsigned int>,false> { 
                        struct CsLess<long unsigned int> { } _M_key_compare; 
                        struct _Rb_tree_node_base { 
                            int _M_color; 
                            struct _Rb_tree_node_base {} *_M_parent; 
                            struct _Rb_tree_node_base {} *_M_left; 
                            struct _Rb_tree_node_base {} *_M_right; 
                        } _M_header; 
                        unsigned int _M_node_count; 
                    } _M_impl; 
                } _M_t; 
            } m_map; 
        } x103; struct ChMap<long unsigned int,long int,CsLess<long unsigned int> > { 
            struct map<long unsigned int,long int,CsLess<long unsigned int>,std::allocator<std::pair<const long unsigned int, long int> > > { 
                struct _Rb_tree<long unsigned int,std::pair<const long unsigned int, long int>,std::_Select1st<std::pair<const long unsigned int, long int> >,CsLess<long unsigned int>,std::allocator<std::pair<const long unsigned int, long int> > > { 
                    struct _Rb_tree_impl<CsLess<long unsigned int>,false> { 
                        struct CsLess<long unsigned int> { } _M_key_compare; 
                        struct _Rb_tree_node_base { 
                            int _M_color; 
                            struct _Rb_tree_node_base {} *_M_parent; 
                            struct _Rb_tree_node_base {} *_M_left; 
                            struct _Rb_tree_node_base {} *_M_right; 
                        } _M_header; 
                        unsigned int _M_node_count; 
                    } _M_impl; 
                } _M_t; 
            } m_map; 
        } x104; float x105; float x106; unsigned short x107; unsigned short x108; int x109; struct ChVector<long int> { 
            long *m_vector; 
            long *m_tmpVector; 
            unsigned int m_count; 
            unsigned int m_size; 
            unsigned int m_blockSize; 
        } x110; struct ChVector<long int> { 
            long *m_vector; 
            long *m_tmpVector; 
            unsigned int m_count; 
            unsigned int m_size; 
            unsigned int m_blockSize; 
        } x111; int x112; boolx113; boolx114; int (**x115)(); struct EshObjectFactory {} *x116; } *mXlReader;
    int mAxisGroup;
    struct XlChartPlot { int (**x1)(); struct XlChart3D {} *x2; struct XlChartChartFormat {} *x3; struct XlChartSeriesFormat {} *x4; struct XlChartLineStyle {} *x5; struct XlChartLineStyle {} *x6; struct XlChartLineStyle {} *x7; struct XlChartLineStyle {} *x8; struct ChVector<XlChartPlot::DefText> { 
            struct DefText {} *m_vector; 
            struct DefText {} *m_tmpVector; 
            unsigned int m_count; 
            unsigned int m_size; 
            unsigned int m_blockSize; 
        } x9; int x10; boolx11; boolx12; boolx13; boolx14; } *mXlCurrentPlot;
    int mXlCurrentPlotIndex;
}


- (int)axisGroup;
- (id)initWithEBReaderSheetState:(id)arg1;
- (void)setAxisGroup:(int)arg1;
- (int)xlPlotCount;
- (void)setXlCurrentPlotIndex:(int)arg1;
- (void)setXlCurrentPlot:(struct XlChartPlot { int (**x1)(); struct XlChart3D {} *x2; struct XlChartChartFormat {} *x3; struct XlChartSeriesFormat {} *x4; struct XlChartLineStyle {} *x5; struct XlChartLineStyle {} *x6; struct XlChartLineStyle {} *x7; struct XlChartLineStyle {} *x8; struct ChVector<XlChartPlot::DefText> { struct DefText {} *x_9_1_1; struct DefText {} *x_9_1_2; unsigned int x_9_1_3; unsigned int x_9_1_4; unsigned int x_9_1_5; } x9; int x10; boolx11; boolx12; boolx13; boolx14; }*)arg1;
- (const struct XlChartSeriesFormat { int (**x1)(); struct XlChartLineStyle {} *x2; struct XlChartFillStyle {} *x3; struct XlChartMarkerStyle {} *x4; struct XlChartPicF {} *x5; int x6; unsigned short x7; unsigned short x8; unsigned short x9; int x10; boolx11; boolx12; boolx13; boolx14; boolx15; boolx16; boolx17; boolx18; boolx19; boolx20; }*)defaultFormatForXlSeries:(const struct XlChartDataSeries { int (**x1)(); struct XlChartSeries {} *x2; unsigned short x3; unsigned short x4; unsigned short x5; struct ChVector<XlChartSeriesFormat*> { struct XlChartSeriesFormat {} **x_6_1_1; struct XlChartSeriesFormat {} **x_6_1_2; unsigned int x_6_1_3; unsigned int x_6_1_4; unsigned int x_6_1_5; } x6; struct ChVector<XlChartSeriesFormat*> { struct XlChartSeriesFormat {} **x_7_1_1; struct XlChartSeriesFormat {} **x_7_1_2; unsigned int x_7_1_3; unsigned int x_7_1_4; unsigned int x_7_1_5; } x7; struct ChVector<XlChartCustomLabelText*> { struct XlChartCustomLabelText {} **x_8_1_1; struct XlChartCustomLabelText {} **x_8_1_2; unsigned int x_8_1_3; unsigned int x_8_1_4; unsigned int x_8_1_5; } x8; struct ChVector<long unsigned int> { unsigned long *x_9_1_1; unsigned long *x_9_1_2; unsigned int x_9_1_3; unsigned int x_9_1_4; unsigned int x_9_1_5; } x9; struct ChVector<long int> { long *x_10_1_1; long *x_10_1_2; unsigned int x_10_1_3; unsigned int x_10_1_4; unsigned int x_10_1_5; } x10; struct XlChartLinkedData {} *x11; struct XlChartLinkedData {} *x12; struct XlChartLinkedData {} *x13; struct XlChartLinkedData {} *x14; struct ChVector<XlChartCustomLegend*> { struct XlChartCustomLegend {} **x_15_1_1; struct XlChartCustomLegend {} **x_15_1_2; unsigned int x_15_1_3; unsigned int x_15_1_4; unsigned int x_15_1_5; } x15; }*)arg1;
- (int)xlCurrentPlotIndex;
- (id)ebReaderSheetState;
- (void)readAndCacheXlChartDataSeries;
- (const struct XlChartSeriesFormat { int (**x1)(); struct XlChartLineStyle {} *x2; struct XlChartFillStyle {} *x3; struct XlChartMarkerStyle {} *x4; struct XlChartPicF {} *x5; int x6; unsigned short x7; unsigned short x8; unsigned short x9; int x10; boolx11; boolx12; boolx13; boolx14; boolx15; boolx16; boolx17; boolx18; boolx19; boolx20; }*)xlCurrentDefaultSeriesFormat;
- (struct XlChartPlot { int (**x1)(); struct XlChart3D {} *x2; struct XlChartChartFormat {} *x3; struct XlChartSeriesFormat {} *x4; struct XlChartLineStyle {} *x5; struct XlChartLineStyle {} *x6; struct XlChartLineStyle {} *x7; struct XlChartLineStyle {} *x8; struct ChVector<XlChartPlot::DefText> { struct DefText {} *x_9_1_1; struct DefText {} *x_9_1_2; unsigned int x_9_1_3; unsigned int x_9_1_4; unsigned int x_9_1_5; } x9; int x10; boolx11; boolx12; boolx13; boolx14; }*)xlCurrentPlot;
- (struct XlChartBinaryReader { int (**x1)(); int (**x2)(); int (**x3)(); struct EshObjectFactory {} *x4; boolx5; struct SsrwOORootStorage {} *x6; struct SsrwOOStorage {} *x7; struct XlEshBinaryReader { int (**x_8_1_1)(); struct SsrwOOStream {} *x_8_1_2; struct EshParserVisitor {} *x_8_1_3; struct EshObjectFactory {} *x_8_1_4; unsigned int x_8_1_5; unsigned int x_8_1_6; struct ChStack<EshHeader> { struct EshHeader {} *x_7_2_1; struct EshHeader {} *x_7_2_2; unsigned int x_7_2_3; unsigned int x_7_2_4; unsigned int x_7_2_5; } x_8_1_7; unsigned int x_8_1_8; struct EshHeader { int x_9_2_1; unsigned int x_9_2_2; short x_9_2_3; unsigned short x_9_2_4; unsigned char x_9_2_5; } x_8_1_9; boolx_8_1_10; boolx_8_1_11; unsigned int x_8_1_12; struct XlReadStgStream {} *x_8_1_13; } x8; struct XlStringExtractor {} *x9; struct XlSheetInfoTable {} *x10; int x11; int x12; int x13; int x14; int x15; int x16; int x17; int x18; int x19; int x20; int x21; int x22; int x23; int x24; int x25; int x26; int x27; int x28; int x29; int x30; int x31; int x32; int x33; int x34; int x35; int x36; int x37; int x38; int x39; int x40; boolx41; boolx42; boolx43; struct ChVector<long int> { long *x_44_1_1; long *x_44_1_2; unsigned int x_44_1_3; unsigned int x_44_1_4; unsigned int x_44_1_5; } x44; struct ChVector<long int> { long *x_45_1_1; long *x_45_1_2; unsigned int x_45_1_3; unsigned int x_45_1_4; unsigned int x_45_1_5; } x45; struct ChVector<long int> { long *x_46_1_1; long *x_46_1_2; unsigned int x_46_1_3; unsigned int x_46_1_4; unsigned int x_46_1_5; } x46; struct XlIndex {} *x47; struct XlRow {} *x48; struct XlRecord {} *x49; int x50; int x51; short x52; int x53; int x54; struct ChVector<XlCell*> { struct XlCell {} **x_55_1_1; struct XlCell {} **x_55_1_2; unsigned int x_55_1_3; unsigned int x_55_1_4; unsigned int x_55_1_5; } x55; int x56; unsigned char x57; int x58; struct XlWorksheetProperties { int (**x_59_1_1)(); unsigned short x_59_1_2; int x_59_1_3; unsigned short x_59_1_4; boolx_59_1_5; unsigned short x_59_1_6; unsigned short x_59_1_7; unsigned short x_59_1_8; unsigned short x_59_1_9; boolx_59_1_10; boolx_59_1_11; boolx_59_1_12; boolx_59_1_13; boolx_59_1_14; boolx_59_1_15; boolx_59_1_16; boolx_59_1_17; boolx_59_1_18; boolx_59_1_19; boolx_59_1_20; boolx_59_1_21; boolx_59_1_22; boolx_59_1_23; boolx_59_1_24; boolx_59_1_25; short x_59_1_26; struct ChVector<XlBrk*> { struct XlBrk {} **x_27_2_1; struct XlBrk {} **x_27_2_2; unsigned int x_27_2_3; unsigned int x_27_2_4; unsigned int x_27_2_5; } x_59_1_27; struct ChVector<XlBrk*> { struct XlBrk {} **x_28_2_1; struct XlBrk {} **x_28_2_2; unsigned int x_28_2_3; unsigned int x_28_2_4; unsigned int x_28_2_5; } x_59_1_28; struct OcText { int (**x_29_2_1)(); int x_29_2_2; unsigned int x_29_2_3; unsigned int x_29_2_4; unsigned int x_29_2_5; char *x_29_2_6; char *x_29_2_7; boolx_29_2_8; } x_59_1_29; } x59; struct XlWorksheetProtection { int (**x_60_1_1)(); boolx_60_1_2; boolx_60_1_3; boolx_60_1_4; boolx_60_1_5; boolx_60_1_6; boolx_60_1_7; boolx_60_1_8; boolx_60_1_9; boolx_60_1_10; boolx_60_1_11; boolx_60_1_12; boolx_60_1_13; boolx_60_1_14; boolx_60_1_15; boolx_60_1_16; boolx_60_1_17; boolx_60_1_18; boolx_60_1_19; short x_60_1_20; } x60; struct XlCalculationProperties { int (**x_61_1_1)(); double x_61_1_2; int x_61_1_3; short x_61_1_4; boolx_61_1_5; int x_61_1_6; boolx_61_1_7; } x61; struct XlSortInfo { int (**x_62_1_1)(); boolx_62_1_2; boolx_62_1_3; boolx_62_1_4; boolx_62_1_5; boolx_62_1_6; boolx_62_1_7; unsigned char x_62_1_8; struct OcText { int (**x_9_2_1)(); int x_9_2_2; unsigned int x_9_2_3; unsigned int x_9_2_4; unsigned int x_9_2_5; char *x_9_2_6; char *x_9_2_7; boolx_9_2_8; } x_62_1_9; struct OcText { int (**x_10_2_1)(); int x_10_2_2; unsigned int x_10_2_3; unsigned int x_10_2_4; unsigned int x_10_2_5; char *x_10_2_6; char *x_10_2_7; boolx_10_2_8; } x_62_1_10; struct OcText { int (**x_11_2_1)(); int x_11_2_2; unsigned int x_11_2_3; unsigned int x_11_2_4; unsigned int x_11_2_5; char *x_11_2_6; char *x_11_2_7; boolx_11_2_8; } x_62_1_11; } x62; struct XlDocumentInfo { int (**x_63_1_1)(); unsigned short x_63_1_2; unsigned short x_63_1_3; int x_63_1_4; boolx_63_1_5; boolx_63_1_6; boolx_63_1_7; boolx_63_1_8; boolx_63_1_9; boolx_63_1_10; boolx_63_1_11; boolx_63_1_12; } x63; struct XlDocumentProtection { int (**x_64_1_1)(); boolx_64_1_2; boolx_64_1_3; boolx_64_1_4; short x_64_1_5; short x_64_1_6; } x64; struct XlFileProtection { int (**x_65_1_1)(); int x_65_1_2; boolx_65_1_3; boolx_65_1_4; short x_65_1_5; struct OcText { int (**x_6_2_1)(); int x_6_2_2; unsigned int x_6_2_3; unsigned int x_6_2_4; unsigned int x_6_2_5; char *x_6_2_6; char *x_6_2_7; boolx_6_2_8; } x_65_1_6; struct OcText { int (**x_7_2_1)(); int x_7_2_2; unsigned int x_7_2_3; unsigned int x_7_2_4; unsigned int x_7_2_5; char *x_7_2_6; char *x_7_2_7; boolx_7_2_8; } x_65_1_7; char *x_65_1_8; } x65; int x66; int x67; struct XlDocumentProperties { int (**x_68_1_1)(); unsigned short x_68_1_2; short x_68_1_3; int x_68_1_4; boolx_68_1_5; boolx_68_1_6; boolx_68_1_7; boolx_68_1_8; boolx_68_1_9; boolx_68_1_10; boolx_68_1_11; boolx_68_1_12; int x_68_1_13; short x_68_1_14; short *x_68_1_15; struct OcText { int (**x_16_2_1)(); int x_16_2_2; unsigned int x_16_2_3; unsigned int x_16_2_4; unsigned int x_16_2_5; char *x_16_2_6; char *x_16_2_7; boolx_16_2_8; } x_68_1_16; int x_68_1_17; struct XlRef { unsigned short x_18_2_1; unsigned short x_18_2_2; short x_18_2_3; short x_18_2_4; boolx_18_2_5; } x_68_1_18; boolx_68_1_19; } x68; struct XlSubstreamProperties { int (**x_69_1_1)(); struct XlSheetInfo { int (**x_2_2_1)(); int x_2_2_2; int x_2_2_3; } x_69_1_2; struct XlPageProperties { int (**x_3_2_1)(); double x_3_2_2; double x_3_2_3; double x_3_2_4; double x_3_2_5; struct OcText {} *x_3_2_6; struct OcText {} *x_3_2_7; boolx_3_2_8; boolx_3_2_9; short x_3_2_10; short x_3_2_11; short x_3_2_12; short x_3_2_13; short x_3_2_14; boolx_3_2_15; int x_3_2_16; boolx_3_2_17; boolx_3_2_18; boolx_3_2_19; boolx_3_2_20; boolx_3_2_21; boolx_3_2_22; short x_3_2_23; short x_3_2_24; short x_3_2_25; double x_3_2_26; double x_3_2_27; short x_3_2_28; } x_69_1_3; struct XlCellTableInfo { int (**x_4_2_1)(); int x_4_2_2; int x_4_2_3; unsigned short x_4_2_4; unsigned short x_4_2_5; } x_69_1_4; int x_69_1_5; int x_69_1_6; } x69; struct XlRecord {} *x70; struct SsrwOOStream {} *x71; unsigned char x72; struct XlObjectFactory {} *x73; struct XlParserVisitor {} *x74; boolx75; int (**x76)(); struct EshObjectFactory {} *x77; struct ChVector<long int> { long *x_78_1_1; long *x_78_1_2; unsigned int x_78_1_3; unsigned int x_78_1_4; unsigned int x_78_1_5; } x78; struct XlSubstreamProperties { int (**x_79_1_1)(); struct XlSheetInfo { int (**x_2_2_1)(); int x_2_2_2; int x_2_2_3; } x_79_1_2; struct XlPageProperties { int (**x_3_2_1)(); double x_3_2_2; double x_3_2_3; double x_3_2_4; double x_3_2_5; struct OcText {} *x_3_2_6; struct OcText {} *x_3_2_7; boolx_3_2_8; boolx_3_2_9; short x_3_2_10; short x_3_2_11; short x_3_2_12; short x_3_2_13; short x_3_2_14; boolx_3_2_15; int x_3_2_16; boolx_3_2_17; boolx_3_2_18; boolx_3_2_19; boolx_3_2_20; boolx_3_2_21; boolx_3_2_22; short x_3_2_23; short x_3_2_24; short x_3_2_25; double x_3_2_26; double x_3_2_27; short x_3_2_28; } x_79_1_3; struct XlCellTableInfo { int (**x_4_2_1)(); int x_4_2_2; int x_4_2_3; unsigned short x_4_2_4; unsigned short x_4_2_5; } x_79_1_4; int x_79_1_5; int x_79_1_6; } x79; int x80; int x81; int x82; struct CsRect<float> { float x_83_1_1[4]; } x83; int x84; int x85; int x86[4]; int x87; int x88; int x89; int x90; int x91; struct ChVector<long int> { long *x_92_1_1; long *x_92_1_2; unsigned int x_92_1_3; unsigned int x_92_1_4; unsigned int x_92_1_5; } x92; int x93[4]; int x94; int x95; struct AxisParentChildren { int x_96_1_1; int x_96_1_2; int x_96_1_3; int x_96_1_4; struct ChVector<long int> { long *x_5_2_1; long *x_5_2_2; unsigned int x_5_2_3; unsigned int x_5_2_4; unsigned int x_5_2_5; } x_96_1_5; int x_96_1_6; int x_96_1_7; int x_96_1_8; } x96; struct AxisParentChildren { int x_97_1_1; int x_97_1_2; int x_97_1_3; int x_97_1_4; struct ChVector<long int> { long *x_5_2_1; long *x_5_2_2; unsigned int x_5_2_3; unsigned int x_5_2_4; unsigned int x_5_2_5; } x_97_1_5; int x_97_1_6; int x_97_1_7; int x_97_1_8; } x97; struct ChVector<XlChartBinaryReader::SeriesDescriptor> { struct SeriesDescriptor {} *x_98_1_1; struct SeriesDescriptor {} *x_98_1_2; unsigned int x_98_1_3; unsigned int x_98_1_4; unsigned int x_98_1_5; } x98; struct ChVector<XlChartBinaryReader::PlotDescriptor> { struct PlotDescriptor {} *x_99_1_1; struct PlotDescriptor {} *x_99_1_2; unsigned int x_99_1_3; unsigned int x_99_1_4; unsigned int x_99_1_5; } x99; struct ChMap<long unsigned int,long int,CsLess<long unsigned int> > { struct map<long unsigned int,long int,CsLess<long unsigned int>,std::allocator<std::pair<const long unsigned int, long int> > > { struct _Rb_tree<long unsigned int,std::pair<const long unsigned int, long int>,std::_Select1st<std::pair<const long unsigned int, long int> >,CsLess<long unsigned int>,std::allocator<std::pair<const long unsigned int, long int> > > { struct _Rb_tree_impl<CsLess<long unsigned int>,false> { struct CsLess<long unsigned int> { } x_1_4_1; struct _Rb_tree_node_base { int x_2_5_1; struct _Rb_tree_node_base {} *x_2_5_2; struct _Rb_tree_node_base {} *x_2_5_3; struct _Rb_tree_node_base {} *x_2_5_4; } x_1_4_2; unsigned int x_1_4_3; } x_1_3_1; } x_1_2_1; } x_100_1_1; } x100; struct ChMap<long unsigned int,long int,CsLess<long unsigned int> > { struct map<long unsigned int,long int,CsLess<long unsigned int>,std::allocator<std::pair<const long unsigned int, long int> > > { struct _Rb_tree<long unsigned int,std::pair<const long unsigned int, long int>,std::_Select1st<std::pair<const long unsigned int, long int> >,CsLess<long unsigned int>,std::allocator<std::pair<const long unsigned int, long int> > > { struct _Rb_tree_impl<CsLess<long unsigned int>,false> { struct CsLess<long unsigned int> { } x_1_4_1; struct _Rb_tree_node_base { int x_2_5_1; struct _Rb_tree_node_base {} *x_2_5_2; struct _Rb_tree_node_base {} *x_2_5_3; struct _Rb_tree_node_base {} *x_2_5_4; } x_1_4_2; unsigned int x_1_4_3; } x_1_3_1; } x_1_2_1; } x_101_1_1; } x101; unsigned short x102; struct ChMap<long unsigned int,long int,CsLess<long unsigned int> > { struct map<long unsigned int,long int,CsLess<long unsigned int>,std::allocator<std::pair<const long unsigned int, long int> > > { struct _Rb_tree<long unsigned int,std::pair<const long unsigned int, long int>,std::_Select1st<std::pair<const long unsigned int, long int> >,CsLess<long unsigned int>,std::allocator<std::pair<const long unsigned int, long int> > > { struct _Rb_tree_impl<CsLess<long unsigned int>,false> { struct CsLess<long unsigned int> { } x_1_4_1; struct _Rb_tree_node_base { int x_2_5_1; struct _Rb_tree_node_base {} *x_2_5_2; struct _Rb_tree_node_base {} *x_2_5_3; struct _Rb_tree_node_base {} *x_2_5_4; } x_1_4_2; unsigned int x_1_4_3; } x_1_3_1; } x_1_2_1; } x_103_1_1; } x103; struct ChMap<long unsigned int,long int,CsLess<long unsigned int> > { struct map<long unsigned int,long int,CsLess<long unsigned int>,std::allocator<std::pair<const long unsigned int, long int> > > { struct _Rb_tree<long unsigned int,std::pair<const long unsigned int, long int>,std::_Select1st<std::pair<const long unsigned int, long int> >,CsLess<long unsigned int>,std::allocator<std::pair<const long unsigned int, long int> > > { struct _Rb_tree_impl<CsLess<long unsigned int>,false> { struct CsLess<long unsigned int> { } x_1_4_1; struct _Rb_tree_node_base { int x_2_5_1; struct _Rb_tree_node_base {} *x_2_5_2; struct _Rb_tree_node_base {} *x_2_5_3; struct _Rb_tree_node_base {} *x_2_5_4; } x_1_4_2; unsigned int x_1_4_3; } x_1_3_1; } x_1_2_1; } x_104_1_1; } x104; float x105; float x106; unsigned short x107; unsigned short x108; int x109; struct ChVector<long int> { long *x_110_1_1; long *x_110_1_2; unsigned int x_110_1_3; unsigned int x_110_1_4; unsigned int x_110_1_5; } x110; struct ChVector<long int> { long *x_111_1_1; long *x_111_1_2; unsigned int x_111_1_3; unsigned int x_111_1_4; unsigned int x_111_1_5; } x111; int x112; boolx113; boolx114; int (**x115)(); struct EshObjectFactory {} *x116; }*)xlReader;
- (id)workbook;
- (id)resources;

@end
