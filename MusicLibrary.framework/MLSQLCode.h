/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class MLSQLCode, NSString, NSMutableArray;

@interface MLSQLCode : NSObject  {
    NSString *_text;
    NSMutableArray *_bindings;
    MLSQLCode *_orderBy;
    MLSQLCode *_groupBy;
    MLSQLCode *_limitBy;
    NSMutableArray *_joins;
    NSMutableArray *_subexpressions;
    NSMutableArray *_subexpressionOperators;
    NSMutableArray *_predicates;
    NSMutableArray *_predicateOperators;
    unsigned int _isTextTerminated : 1;
    unsigned int _isToken : 1;
}

+ (id)openParenCode;
+ (id)closeParenCode;
+ (id)andOperatorCode;
+ (id)orOperatorCode;
+ (id)codeWithSQLFormat:(id)arg1;
+ (BOOL)performWithConnection:(struct CPSqliteConnection { struct CPSqliteDatabase {} *x1; struct sqlite3 {} *x2; struct __CFDictionary {} *x3; void *x4; int (*x5)(); int (*x6)(); void *x7; unsigned int x8; }*)arg1 sqlFormat:(id)arg2;
+ (BOOL)ownsToken:(id)arg1;
+ (id)_shallowDescriptionOfCodeArray:(id)arg1;
+ (BOOL)performWrite:(BOOL)arg1 store:(struct CPRecordStore { }*)arg2 transactionType:(unsigned int)arg3 arrayOfCode:(id)arg4;
+ (BOOL)performWriteToStore:(struct CPRecordStore { }*)arg1 transactionType:(unsigned int)arg2 code:(id)arg3;
+ (BOOL)performReadFromStore:(struct CPRecordStore { }*)arg1 code:(id)arg2;
+ (unsigned long long)lastInsertionROWID:(struct CPSqliteConnection { struct CPSqliteDatabase {} *x1; struct sqlite3 {} *x2; struct __CFDictionary {} *x3; void *x4; int (*x5)(); int (*x6)(); void *x7; unsigned int x8; }*)arg1;
+ (id)expressionTokenWhenJoinedToCodeClass:(Class)arg1 joinOp:(id)arg2;
+ (id)expressionToken;

- (id)_text;
- (id)init;
- (void)dealloc;
- (id)description;
- (id)predicates;
- (void)setBindingAtIndex:(long)arg1 toUInt32Value:(unsigned int)arg2;
- (void)appendPredicate:(id)arg1 withBinaryOp:(id)arg2;
- (void)setBindingAtIndex:(long)arg1 toCPRecord:(void*)arg2;
- (void)setBindingsInRange:(struct { int x1; int x2; })arg1 toCodeBindings:(id)arg2;
- (void)setBindingAtIndex:(long)arg1 toStringValue:(id)arg2;
- (BOOL)performWithConnection:(struct CPSqliteConnection { struct CPSqliteDatabase {} *x1; struct sqlite3 {} *x2; struct __CFDictionary {} *x3; void *x4; int (*x5)(); int (*x6)(); void *x7; unsigned int x8; }*)arg1;
- (BOOL)isToken;
- (void)_initBindings:(unsigned int)arg1;
- (id)__initWithSQLBindingCount:(long)arg1 sqlString:(id)arg2;
- (id)initToken:(id)arg1;
- (id)initWithSQLBindingCount:(long)arg1 sqlFormat:(id)arg2;
- (id)_descriptionWithOptions:(unsigned int)arg1 level:(int)arg2;
- (id)_descriptionWithOptions:(unsigned int)arg1;
- (id)_copyOfVisitableCodeArray;
- (void)__gatherCodeInto:(id)arg1 predicateOperators:(id)arg2 bindings:(id)arg3 codeBaseClass:(Class)arg4 deep:(BOOL)arg5 filterUsing:(int (*)())arg6 filterContext:(void*)arg7;
- (void)__gatherCodeInto:(id)arg1 predicateOperators:(id)arg2 bindings:(id)arg3 codeBaseClass:(Class)arg4 deep:(BOOL)arg5;
- (BOOL)_gatherBindings:(id*)arg1 deep:(BOOL)arg2;
- (BOOL)_gatherCode:(id*)arg1 withBaseClass:(Class)arg2 deep:(BOOL)arg3 filterUsing:(int (*)())arg4 filterContext:(void*)arg5;
- (BOOL)_gatherJoins:(id*)arg1 deep:(BOOL)arg2;
- (BOOL)_gatherPredicates:(id*)arg1 predicateOperators:(id*)arg2 deep:(BOOL)arg3;
- (id)_copyFlattenedCodeTextByRequiringSemiColon:(BOOL)arg1;
- (id)_copyShallowCodeTextByResolvingBindings;
- (id)_copyFlattenedCodeTextByResolvingBindings;
- (void)_expressionTextByJoiningInto:(id*)arg1 expression:(id)arg2 joiningOps:(id)arg3 lastJoinedCodeClass:(Class)arg4;
- (id)_expressionTextByJoiningExpression:(id)arg1 joiningOps:(id)arg2 lastJoinedCodeClass:(Class)arg3;
- (id)_copyFlattenedCodeText;
- (unsigned int)_bindParametersToSQLStatement:(struct CPSqliteStatement { struct CPSqliteConnection {} *x1; struct sqlite3_stmt {} *x2; }*)arg1 initialBindingIndex:(unsigned int)arg2;
- (void)_checkValidFlattenedCodeText:(id)arg1 splitIntoMultipleIfNecessary:(BOOL)arg2;
- (BOOL)_compiledSqliteStatementForConnection:(struct CPSqliteConnection { struct CPSqliteDatabase {} *x1; struct sqlite3 {} *x2; struct __CFDictionary {} *x3; void *x4; int (*x5)(); int (*x6)(); void *x7; unsigned int x8; }*)arg1 preparedStatement:(struct CPSqliteStatement {}**)arg2 performStatement:(BOOL)arg3 splitIntoMultipleIfNecessary:(BOOL)arg4;
- (BOOL)isNoOp;
- (long)countOfBindings;
- (void)setBindingAtIndex:(long)arg1 toBooleanValue:(unsigned char)arg2;
- (void)setBindingAtIndex:(long)arg1 toUInt64Value:(unsigned long long)arg2;
- (void)setBindingAtIndex:(long)arg1 toSInt64Value:(long long)arg2;
- (void)setBindingAtIndex:(long)arg1 toCFStringRef:(struct __CFString { }*)arg2;
- (void)setBindingAtIndex:(long)arg1 toDataValue:(id)arg2;
- (void)setBindingAtIndex:(long)arg1 toCFDataRef:(struct __CFData { }*)arg2;
- (void)setBindingAtIndex:(long)arg1 toCPRecordID:(int)arg2 store:(struct CPRecordStore { }*)arg3;
- (void)setBindingAtIndex:(long)arg1 toCodeBinding:(id)arg2;
- (long)countOfSubexpressions;
- (id)subexpressionAtIndex:(long)arg1;
- (void)_insertSubexpression:(id)arg1 atIndex:(unsigned int)arg2 withBinaryOp:(id)arg3;
- (void)appendSubexpression:(id)arg1;
- (void)appendSubexpression:(id)arg1 withBinaryOp:(id)arg2;
- (void)appendJoin:(id)arg1;
- (void)appendJoins:(id)arg1;
- (id)joinSQLString;
- (id)orderByCode;
- (id)groupByCode;
- (id)limitByCode;
- (void)setOrderByCode:(id)arg1;
- (void)setGroupByCode:(id)arg1;
- (void)setLimitByCode:(id)arg1;
- (BOOL)performAsMultipleStatementsWithConnection:(struct CPSqliteConnection { struct CPSqliteDatabase {} *x1; struct sqlite3 {} *x2; struct __CFDictionary {} *x3; void *x4; int (*x5)(); int (*x6)(); void *x7; unsigned int x8; }*)arg1;
- (struct CPSqliteStatement { struct CPSqliteConnection {} *x1; struct sqlite3_stmt {} *x2; }*)copyCompiledSqliteStatementForConnection:(struct CPSqliteConnection { struct CPSqliteDatabase {} *x1; struct sqlite3 {} *x2; struct __CFDictionary {} *x3; void *x4; int (*x5)(); int (*x6)(); void *x7; unsigned int x8; }*)arg1;
- (BOOL)allowsJoins;
- (id)initWithSQLFormat:(id)arg1;
- (id)joins;

@end
