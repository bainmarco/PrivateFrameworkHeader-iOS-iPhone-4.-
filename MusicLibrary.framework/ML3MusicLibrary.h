/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSArray, NSString, ML3Container, ML3CacheGenerator, ML3MusicLibrary_SQLiteDatabaseContext;

@interface ML3MusicLibrary : NSObject  {
    ML3MusicLibrary_SQLiteDatabaseContext *_mainDatabaseContext;
    ML3MusicLibrary_SQLiteDatabaseContext *_backgroundDatabaseContext;
    struct dispatch_queue_s { } *_backgroundQueue;
    NSString *_path;
    NSString *_notifyName;
    NSString *_nonContentsNotifyName;
    int _notifyToken;
    int _nonContentsNotifyToken;
    int _downloadFinishedNotifyToken;
    BOOL _enableWrites;
    BOOL _hasEverConnectedToDatabase;
    id _revertToBackupObserver;
    id _mcSettingsObserver;
}

@property(copy,readonly) NSArray * localizedSectionIndexTitles;
@property(readonly) ML3Container * purchasedTracksPlaylist;
@property(readonly) NSArray * preferredAudioTracks;
@property(readonly) NSArray * preferredSubtitleTracks;
@property(readonly) ML3CacheGenerator * cacheGenerator;
@property(readonly) BOOL mediaRestrictionEnabled;
@property(readonly) BOOL requiresiTunesCommandsProcessing;
@property(readonly) BOOL requiresPostProcessing;
@property(readonly) unsigned long long syncGenerationID;
@property(readonly) BOOL hasEverConnectedToDatabase;
@property(copy,readonly) NSString * path;

+ (void)initialize;
+ (id)sharedLibrary;
+ (BOOL)statementHasRowAfterStepping:(struct sqlite3_stmt { }*)arg1;
+ (BOOL)statementDidFinishAfterStepping:(struct sqlite3_stmt { }*)arg1;
+ (id)selectStatementValueForSQL:(id)arg1 defaultValue:(id)arg2 usingHandle:(struct sqlite3 { }*)arg3;
+ (BOOL)executeUsingHandle:(struct sqlite3 { }*)arg1 eachSQL:(id)arg2;
+ (BOOL)dropOldItemTriggersUsingHandle:(struct sqlite3 { }*)arg1;
+ (BOOL)createItemTriggersUsingHandle:(struct sqlite3 { }*)arg1;
+ (BOOL)dropOldContainerTriggersUsingHandle:(struct sqlite3 { }*)arg1;
+ (BOOL)createContainerTriggersUsingHandle:(struct sqlite3 { }*)arg1;
+ (void)createTriggersUsingHandle:(struct sqlite3 { }*)arg1;
+ (BOOL)executeSQL:(id)arg1 usingHandle:(struct sqlite3 { }*)arg2;
+ (void)closeDatabaseHandle:(struct sqlite3 { }*)arg1;
+ (void)buildDatabaseTablesUsingHandle:(struct sqlite3 { }*)arg1;
+ (void)buildDatabaseFromHomeSharingConnection:(id)arg1 atPath:(id)arg2 completionHandler:(id)arg3;
+ (void)buildDatabaseFromHomeSharingConnection:(id)arg1 atPath:(id)arg2 completionHandler:(id)arg3 progressHandler:(id)arg4;
+ (void)dropOldTriggersUsingHandle:(struct sqlite3 { }*)arg1;
+ (BOOL)importationEnabled;
+ (void)setImportationEnabled:(BOOL)arg1;
+ (void)mediaFolderPathDidChangeNotification:(id)arg1;
+ (id)mainLibraryPath;
+ (void)attachAuxiliaryDatabases:(struct sqlite3 { }*)arg1;
+ (void)limitCacheSize:(struct sqlite3 { }*)arg1;
+ (void)ensureIndexExists:(id)arg1 onHandle:(struct sqlite3 { }*)arg2 entityClass:(Class)arg3 indexableSQL:(id)arg4;
+ (void)ensureIndexExists:(id)arg1 onHandle:(struct sqlite3 { }*)arg2 entityClass:(Class)arg3 properties:(id)arg4;
+ (void)ensureSectionAndListIndicesExist:(id)arg1 onHandle:(struct sqlite3 { }*)arg2 entityClass:(Class)arg3 filteredProperties:(id)arg4 sectionProperties:(id)arg5 orderingProperties:(id)arg6 representativeItemProperty:(id)arg7;
+ (void)enumerateSortMapTablesUsingBlock:(id)arg1;
+ (BOOL)updateSortMapOnHandle:(struct sqlite3 { }*)arg1;
+ (void)ensureIndicesExistOnHandle:(struct sqlite3 { }*)arg1;
+ (struct __CFDictionary { }*)threadLocalCFMutableDictionaryForKey:(id)arg1 withValueCallbacks:(const struct { int x1; int (*x2)(); int (*x3)(); int (*x4)(); int (*x5)(); }*)arg2;
+ (void)stepStatement:(struct sqlite3_stmt { }*)arg1 hasRow:(BOOL*)arg2 didFinish:(BOOL*)arg3;
+ (void)prepareStatementForSQL:(id)arg1 usingHandle:(struct sqlite3 { }*)arg2 block:(id)arg3;
+ (void)registerFunctionsOnHandle:(struct sqlite3 { }*)arg1;
+ (void)registerCustomCallbacksOnHandle:(struct sqlite3 { }*)arg1;

- (id)path;
- (void)dealloc;
- (void)reconnectToDatabase;
- (BOOL)mediaRestrictionEnabled;
- (void)prepareStatementForSQL:(id)arg1 usingBlock:(id)arg2;
- (id)preferredAudioTracks;
- (id)preferredSubtitleTracks;
- (id)localizedSectionHeaderForSectionIndex:(unsigned int)arg1;
- (unsigned int)sectionIndexTitleIndexForSectionIndex:(unsigned int)arg1;
- (id)localizedSectionIndexTitles;
- (unsigned long long)syncGenerationID;
- (void)performTransactionWithBlock:(id)arg1;
- (id)selectStatementValueForSQL:(id)arg1 defaultValue:(id)arg2;
- (BOOL)executeITunesCommands;
- (void)updateActivePlaylistNamesForCurrentLanguage;
- (void)updateOrderingLanguagesForCurrentLangauge;
- (void)fillContainerForHomeSharingConnection:(id)arg1 containerID:(long long)arg2 completionHandler:(id)arg3;
- (void)checkForChangesOnConnection:(id)arg1 completionHandler:(id)arg2;
- (id)cacheGenerator;
- (id)purchasedTracksPlaylist;
- (id)initWithPath:(id)arg1 enableWrites:(BOOL)arg2;
- (id)entityForClass:(Class)arg1 persistentID:(long long)arg2;
- (void)_debugLoggingOptionsDidChangeNotification:(id)arg1;
- (BOOL)canWriteToDatabase;
- (int)openDatabaseHandle:(struct sqlite3 {}**)arg1;
- (BOOL)executeSQL:(id)arg1;
- (long long)addStringToSortMap:(id)arg1;
- (long long)insertStringIntoSortMapNoTransaction:(id)arg1;
- (BOOL)updateSortMap;
- (void)ensureIndicesExist;
- (void)populateStaticItemsOfDynamicContainers;
- (id)newDatabaseContext;
- (id)backgroundQueue_backgroundDatabaseContext;
- (void)accessDatabaseContextUsingBlock:(id)arg1;
- (void)accessSortKeyBuilder:(id)arg1;
- (void)performOperationInBackground:(id)arg1;
- (void)createTriggers;
- (void)dropOldTriggers;
- (void)postChangeNotificationAndScheduleFlush;
- (void)postNonContentsChangeNotificationAndScheduleFlush;
- (int)_executediTunesCommandsVersion;
- (BOOL)requiresiTunesCommandsProcessing;
- (BOOL)_mustProcessLanguageChange;
- (BOOL)requiresPostProcessing;
- (void)notifyContentsDidChange;
- (void)notifyNonContentsPropertyDidChange;
- (void)executeITDBPostProcessing;
- (BOOL)_schemaHasDefinedTable:(id)arg1;
- (BOOL)hasEverConnectedToDatabase;
- (void)savePlaylists;
- (void)saveTrackMetadata;

@end
