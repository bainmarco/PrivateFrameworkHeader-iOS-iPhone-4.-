/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/TextInput.framework/TextInput
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class NSMutableString;

@interface TIKeyboardInputManagerZephyr : UIKeyboardInputManager  {
    struct TIInputManagerZephyr { int (**x1)(); struct StaticDictionaryAlphabet { 
            int (**_vptr$StaticDictionary)(); 
            struct WordTrie { 
                struct ReadOnlyDataFile {} *m_index; 
                struct ReadOnlyDataFile {} *m_words; 
                unsigned int m_word_count; 
                struct RefPtr<KB::WordTrieNode> { 
                    struct WordTrieNode {} *m_ptr; 
                } m_root; 
                struct WordTrieSearch { 
                    struct Vector<WTF::RefPtr<KB::WordTrieNode>,0ul> { 
                        unsigned int m_size; 
                        struct VectorBuffer<WTF::RefPtr<KB::WordTrieNode>,0ul> { 
                            struct RefPtr<KB::WordTrieNode> {} *m_buffer; 
                            unsigned int m_capacity; 
                        } m_buffer; 
                    } m_states; 
                    int m_type; 
                    struct String { 
                        unsigned short m_size; 
                        unsigned short m_capacity; 
                        unsigned short m_length; 
                        unsigned short m_sort_key_length; 
                        unsigned char m_buffer_type; 
                        char *m_buffer; 
                        BOOL m_static_buffer[16]; 
                    } m_string; 
                    struct String { 
                        unsigned short m_size; 
                        unsigned short m_capacity; 
                        unsigned short m_length; 
                        unsigned short m_sort_key_length; 
                        unsigned char m_buffer_type; 
                        char *m_buffer; 
                        BOOL m_static_buffer[16]; 
                    } m_sort_key; 
                } m_search; 
                struct WordTrieSearch { 
                    struct Vector<WTF::RefPtr<KB::WordTrieNode>,0ul> { 
                        unsigned int m_size; 
                        struct VectorBuffer<WTF::RefPtr<KB::WordTrieNode>,0ul> { 
                            struct RefPtr<KB::WordTrieNode> {} *m_buffer; 
                            unsigned int m_capacity; 
                        } m_buffer; 
                    } m_states; 
                    int m_type; 
                    struct String { 
                        unsigned short m_size; 
                        unsigned short m_capacity; 
                        unsigned short m_length; 
                        unsigned short m_sort_key_length; 
                        unsigned char m_buffer_type; 
                        char *m_buffer; 
                        BOOL m_static_buffer[16]; 
                    } m_string; 
                    struct String { 
                        unsigned short m_size; 
                        unsigned short m_capacity; 
                        unsigned short m_length; 
                        unsigned short m_sort_key_length; 
                        unsigned char m_buffer_type; 
                        char *m_buffer; 
                        BOOL m_static_buffer[16]; 
                    } m_sort_key; 
                } m_saved_search; 
                boolm_returns_words_shorter_than_search; 
                boolm_valid; 
                struct TrieArrayCacheSet<KB::TrieArrayCache<KB::PackedTrieSibling, const char*>,const char*> { 
                    struct TrieArrayCache<KB::PackedTrieSibling,const char*> { 
                        char *m_loaded_for_parent; 
                        int m_num_tags; 
                        unsigned char m_tag_list[256]; 
                        struct PackedTrieSibling { 
                            union { 
                                unsigned int whole; 
                                struct $_561 { 
                                    unsigned int child_offset : 24; 
                                    unsigned int patricia_key_size_1 : 2; 
                                    unsigned int has_child_offset_type : 2; 
                                    unsigned int has_word_termination_prob : 1; 
                                    unsigned int has_unigram_list_offset : 1; 
                                    unsigned int has_freq : 1; 
                                    unsigned int more_siblings : 1; 
                                } v2fields; 
                                struct $_562 { 
                                    unsigned int child_offset_byte0 : 8; 
                                    unsigned int child_offset_byte1 : 8; 
                                    unsigned int child_offset_byte2 : 8; 
                                    unsigned int flags_byte : 8; 
                                } v2bytes; 
                            } sortNchild; 
                            union { 
                                unsigned int whole; 
                                struct $_564 { 
                                    unsigned int word_offset : 23; 
                                    unsigned int word_is_0freq : 1; 
                                    unsigned int compacted_freq : 8; 
                                } fields; 
                                struct $_565 { 
                                    unsigned int word_offset_or_prob_byte0 : 8; 
                                    unsigned int word_offset_byte1 : 8; 
                                    unsigned int word_offset_byte2 : 8; 
                                    unsigned int freq_byte : 8; 
                                } v2bytes; 
                            } freqNword; 
                            unsigned char patricia_key_bytes[4]; 
                        } m_values[256]; 
                        char *m_base_addr; 
                    } root; 
                    struct TrieArrayCache<KB::PackedTrieSibling,const char*> { 
                        char *m_loaded_for_parent; 
                        int m_num_tags; 
                        unsigned char m_tag_list[256]; 
                        struct PackedTrieSibling { 
                            union { 
                                unsigned int whole; 
                                struct $_561 { 
                                    unsigned int child_offset : 24; 
                                    unsigned int patricia_key_size_1 : 2; 
                                    unsigned int has_child_offset_type : 2; 
                                    unsigned int has_word_termination_prob : 1; 
                                    unsigned int has_unigram_list_offset : 1; 
                                    unsigned int has_freq : 1; 
                                    unsigned int more_siblings : 1; 
                                } v2fields; 
                                struct $_562 { 
                                    unsigned int child_offset_byte0 : 8; 
                                    unsigned int child_offset_byte1 : 8; 
                                    unsigned int child_offset_byte2 : 8; 
                                    unsigned int flags_byte : 8; 
                                } v2bytes; 
                            } sortNchild; 
                            union { 
                                unsigned int whole; 
                                struct $_564 { 
                                    unsigned int word_offset : 23; 
                                    unsigned int word_is_0freq : 1; 
                                    unsigned int compacted_freq : 8; 
                                } fields; 
                                struct $_565 { 
                                    unsigned int word_offset_or_prob_byte0 : 8; 
                                    unsigned int word_offset_byte1 : 8; 
                                    unsigned int word_offset_byte2 : 8; 
                                    unsigned int freq_byte : 8; 
                                } v2bytes; 
                            } freqNword; 
                            unsigned char patricia_key_bytes[4]; 
                        } m_values[256]; 
                        char *m_base_addr; 
                    } deep; 
                } m_trie_array_cache_set; 
                unsigned int m_compilation_flags; 
                unsigned int m_unigram_payload_offset; 
                unsigned int m_trie_root_offset; 
                float m_root_usage_sum; 
                struct SortKeyByteConverter { 
                    int (**_vptr$SortKeyByteConverter)(); 
                    unsigned int m_single_primaries_to_letter[256]; 
                    boolm_is_known_lead_primary[256]; 
                    struct Hashmap<KB::String,unsigned int> { 
                        unsigned int m_size; 
                        unsigned int m_capacity; 
                        unsigned int m_table_size; 
                        unsigned int m_extra_size; 
                        unsigned int m_extra_index; 
                        boolm_rehashing; 
                        struct HashTraits<KB::String> { } m_traits; 
                        struct Bucket<KB::String,unsigned int> {} *m_table; 
                        struct Bucket<KB::String,unsigned int> {} *m_extra; 
                    } m_sort_keys_to_letter_forms; 
                } m_sort_key_converter; 
            } m_trie; 
            int m_log_level; 
        } x2; struct Vector<KB::Input> { 
            unsigned int m_size; 
            unsigned int m_capacity; 
            struct Input {} *m_elements; 
        } x3; struct String { 
            unsigned short m_size; 
            unsigned short m_capacity; 
            unsigned short m_length; 
            unsigned short m_sort_key_length; 
            unsigned char m_buffer_type; 
            char *m_buffer; 
            BOOL m_static_buffer[16]; 
        } x4; struct String { 
            unsigned short m_size; 
            unsigned short m_capacity; 
            unsigned short m_length; 
            unsigned short m_sort_key_length; 
            unsigned char m_buffer_type; 
            char *m_buffer; 
            BOOL m_static_buffer[16]; 
        } x5; struct Vector<KB::String> { 
            unsigned int m_size; 
            unsigned int m_capacity; 
            struct String {} *m_elements; 
        } x6; unsigned int x7; unsigned int x8; struct Hashmap<KB::String,KB::Word> { 
            unsigned int m_size; 
            unsigned int m_capacity; 
            unsigned int m_table_size; 
            unsigned int m_extra_size; 
            unsigned int m_extra_index; 
            boolm_rehashing; 
            struct HashTraits<KB::String> { } m_traits; 
            struct Bucket<KB::String,KB::Word> {} *m_table; 
            struct Bucket<KB::String,KB::Word> {} *m_extra; 
        } x9; boolx10; boolx11; boolx12; boolx13; boolx14; boolx15; int x16; struct __CFString {} *x17; struct __CFLocale {} *x18; struct DynamicDictionary { 
            struct RefPtr<KB::DynamicDictionaryImpl> { 
                struct DynamicDictionaryImpl {} *m_ptr; 
            } m_impl; 
            int m_log_level; 
        } x19; struct StrokeBuildManager {} *x20; struct SortedKeyLayout { 
            unsigned int m_size; 
            unsigned int m_capacity; 
            struct KeyArea {} *m_elements; 
            struct KeyArea {} *m_neighborKeys[13]; 
            int m_numNeighborKeys; 
            int m_neighborIteratorIndex; 
            float m_neighborSearchRadiusSQE; 
            struct CGPoint { 
                float x; 
                float y; 
            } m_coordinateForNeighborSort; 
            struct KeyCharClassifier { 
                unsigned short m_classifier_flags; 
            } m_unionOfKeysClassifier; 
            float m_leftmostXcentroid; 
            float m_rightmostXcentroid; 
            float m_smallestKeyRadius; 
            float g_touchKeyErrorNormalizer; 
            float g_interTouchErrorNormalizer; 
            float k_maxKeyRadiusBeforeDeadzone; 
            float k_searchRadius_TypingSlow; 
            float k_searchRadius_TypingFast; 
            float k_errorStdev_KeyCenterToFinger; 
            float k_errorStdev_KeyCenterToThumb; 
            float k_errorStdev_InterFinger; 
            float k_errorStdev_InterThumb; 
            float k_errorStdev_InterNonAlphabetic; 
        } x21; struct TIKeyLayout {} *x22; struct String { 
            unsigned short m_size; 
            unsigned short m_capacity; 
            unsigned short m_length; 
            unsigned short m_sort_key_length; 
            unsigned char m_buffer_type; 
            char *m_buffer; 
            BOOL m_static_buffer[16]; 
        } x23; struct LayoutDictionaryContext { 
            struct SortedKeyLayout {} *key_layout; 
            struct WordTrie {} *static_trie; 
            struct DynamicDictionary {} *dynamic_dict; 
            struct Vector<ZT::PriorTouchKeyVectors> { 
                unsigned int m_size; 
                unsigned int m_capacity; 
                struct PriorTouchKeyVectors {} *m_elements; 
            } prior_touch_error_vector_cache; 
            struct Vector<KB::DictionaryCursors> { 
                unsigned int m_size; 
                unsigned int m_capacity; 
                struct DictionaryCursors {} *m_elements; 
            } cursor_prediction_temp_list; 
            struct SortKeyByteConverter {} *sort_key_converter; 
            unsigned int compoundable_meta_flags; 
            boolallow_space_corrections; 
            booluses_candidate_selection; 
        } x24; struct Hashmap<KB::String,KB::FPoint> { 
            unsigned int m_size; 
            unsigned int m_capacity; 
            unsigned int m_table_size; 
            unsigned int m_extra_size; 
            unsigned int m_extra_index; 
            boolm_rehashing; 
            struct HashTraits<KB::String> { } m_traits; 
            struct Bucket<KB::String,KB::FPoint> {} *m_table; 
            struct Bucket<KB::String,KB::FPoint> {} *m_extra; 
        } x25; int x26; boolx27; } *m_impl;
    NSMutableString *m_composedText;
    unsigned int m_defaultCandidateIndex;
}


- (BOOL)canHandleKeyHitTest;
- (id)addInput:(id)arg1 flags:(unsigned int)arg2 point:(struct CGPoint { float x1; float x2; })arg3 firstDelete:(unsigned int*)arg4 fromVariantKey:(BOOL)arg5;
- (void)setInput:(id)arg1;
- (void)setInput:(id)arg1 typedString:(id)arg2;
- (unsigned int)inputCount;
- (id)inputString;
- (void)inputLocationChanged;
- (id)autocorrection;
- (id)defaultCandidate;
- (void)addToTypingHistory:(id)arg1;
- (void)textAccepted:(id)arg1;
- (void)decreaseUserFrequency:(id)arg1;
- (void)clearDynamicDictionary;
- (void)setCalculatesChargedKeyProbabilities:(BOOL)arg1;
- (void)clearKeyAreas;
- (void)registerKeyArea:(struct CGPoint { float x1; float x2; })arg1 withRadii:(struct CGPoint { float x1; float x2; })arg2 forKeyCode:(unsigned short)arg3 forLowerKey:(id)arg4 forUpperKey:(id)arg5;
- (int)keyHitTest:(struct CGPoint { float x1; float x2; })arg1 touchStage:(int)arg2 atTime:(double)arg3 withTouch:(id)arg4 forceShift:(BOOL)arg5;
- (void)deleteFromStrokeHistory:(BOOL)arg1;
- (void)clearAllCentroids;
- (void)setAutoCorrects:(BOOL)arg1;
- (void)setAutoShift:(BOOL)arg1;
- (void)configureInputModeSpecificFeatures:(id)arg1;
- (void)registerCentroid:(struct CGPoint { float x1; float x2; })arg1 forKey:(id)arg2;
- (struct __CFDictionary { }*)chargedKeyProbabilities;
- (BOOL)usesCandidateSelection;
- (unsigned int)inputIndex;
- (void)setInputIndex:(unsigned int)arg1;
- (BOOL)acceptsCharacter:(unsigned short)arg1;
- (unsigned int)defaultCandidateIndex;
- (id)shadowTyping;
- (id)deleteFromInput:(unsigned int*)arg1;
- (void)configureKeyboard:(id)arg1 forCandidates:(id)arg2;
- (void)increaseUserFrequency:(id)arg1;
- (void)acceptInput;
- (BOOL)inputEmpty;
- (id)candidates;
- (void)setShallowPrediction:(BOOL)arg1;
- (void)setKeyboardEventsLagging:(BOOL)arg1;
- (void)clearInput;
- (void)setInHardwareKeyboardMode:(BOOL)arg1;
- (BOOL)keySlidIntoSwipe;
- (id)init;
- (void)dealloc;
- (void)setShift:(BOOL)arg1;
- (unsigned int)internalIndexToExternal:(unsigned int)arg1;
- (void)setCollatorLocale;
- (struct TIInputManagerZephyr { int (**x1)(); struct StaticDictionaryAlphabet { int (**x_2_1_1)(); struct WordTrie { struct ReadOnlyDataFile {} *x_2_2_1; struct ReadOnlyDataFile {} *x_2_2_2; unsigned int x_2_2_3; struct RefPtr<KB::WordTrieNode> { struct WordTrieNode {} *x_4_3_1; } x_2_2_4; struct WordTrieSearch { struct Vector<WTF::RefPtr<KB::WordTrieNode>,0ul> { unsigned int x_1_4_1; struct VectorBuffer<WTF::RefPtr<KB::WordTrieNode>,0ul> { struct RefPtr<KB::WordTrieNode> {} *x_2_5_1; unsigned int x_2_5_2; } x_1_4_2; } x_5_3_1; int x_5_3_2; struct String { unsigned short x_3_4_1; unsigned short x_3_4_2; unsigned short x_3_4_3; unsigned short x_3_4_4; unsigned char x_3_4_5; char *x_3_4_6; BOOL x_3_4_7[16]; } x_5_3_3; struct String { unsigned short x_4_4_1; unsigned short x_4_4_2; unsigned short x_4_4_3; unsigned short x_4_4_4; unsigned char x_4_4_5; char *x_4_4_6; BOOL x_4_4_7[16]; } x_5_3_4; } x_2_2_5; struct WordTrieSearch { struct Vector<WTF::RefPtr<KB::WordTrieNode>,0ul> { unsigned int x_1_4_1; struct VectorBuffer<WTF::RefPtr<KB::WordTrieNode>,0ul> { struct RefPtr<KB::WordTrieNode> {} *x_2_5_1; unsigned int x_2_5_2; } x_1_4_2; } x_6_3_1; int x_6_3_2; struct String { unsigned short x_3_4_1; unsigned short x_3_4_2; unsigned short x_3_4_3; unsigned short x_3_4_4; unsigned char x_3_4_5; char *x_3_4_6; BOOL x_3_4_7[16]; } x_6_3_3; struct String { unsigned short x_4_4_1; unsigned short x_4_4_2; unsigned short x_4_4_3; unsigned short x_4_4_4; unsigned char x_4_4_5; char *x_4_4_6; BOOL x_4_4_7[16]; } x_6_3_4; } x_2_2_6; boolx_2_2_7; boolx_2_2_8; struct TrieArrayCacheSet<KB::TrieArrayCache<KB::PackedTrieSibling, const char*>,const char*> { struct TrieArrayCache<KB::PackedTrieSibling,const char*> { char *x_1_4_1; int x_1_4_2; unsigned char x_1_4_3[256]; struct PackedTrieSibling { union { unsigned int x_1_6_1; struct $_561 { unsigned int x_2_7_1 : 24; unsigned int x_2_7_2 : 2; unsigned int x_2_7_3 : 2; unsigned int x_2_7_4 : 1; unsigned int x_2_7_5 : 1; unsigned int x_2_7_6 : 1; unsigned int x_2_7_7 : 1; } x_1_6_2; struct $_562 { unsigned int x_3_7_1 : 8; unsigned int x_3_7_2 : 8; unsigned int x_3_7_3 : 8; unsigned int x_3_7_4 : 8; } x_1_6_3; } x_4_5_1; union { unsigned int x_2_6_1; struct $_564 { unsigned int x_2_7_1 : 23; unsigned int x_2_7_2 : 1; unsigned int x_2_7_3 : 8; } x_2_6_2; struct $_565 { unsigned int x_3_7_1 : 8; unsigned int x_3_7_2 : 8; unsigned int x_3_7_3 : 8; unsigned int x_3_7_4 : 8; } x_2_6_3; } x_4_5_2; unsigned char x_4_5_3[4]; } x_1_4_4[256]; char *x_1_4_5; } x_9_3_1; struct TrieArrayCache<KB::PackedTrieSibling,const char*> { char *x_2_4_1; int x_2_4_2; unsigned char x_2_4_3[256]; struct PackedTrieSibling { union { unsigned int x_1_6_1; struct $_561 { unsigned int x_2_7_1 : 24; unsigned int x_2_7_2 : 2; unsigned int x_2_7_3 : 2; unsigned int x_2_7_4 : 1; unsigned int x_2_7_5 : 1; unsigned int x_2_7_6 : 1; unsigned int x_2_7_7 : 1; } x_1_6_2; struct $_562 { unsigned int x_3_7_1 : 8; unsigned int x_3_7_2 : 8; unsigned int x_3_7_3 : 8; unsigned int x_3_7_4 : 8; } x_1_6_3; } x_4_5_1; union { unsigned int x_2_6_1; struct $_564 { unsigned int x_2_7_1 : 23; unsigned int x_2_7_2 : 1; unsigned int x_2_7_3 : 8; } x_2_6_2; struct $_565 { unsigned int x_3_7_1 : 8; unsigned int x_3_7_2 : 8; unsigned int x_3_7_3 : 8; unsigned int x_3_7_4 : 8; } x_2_6_3; } x_4_5_2; unsigned char x_4_5_3[4]; } x_2_4_4[256]; char *x_2_4_5; } x_9_3_2; } x_2_2_9; unsigned int x_2_2_10; unsigned int x_2_2_11; unsigned int x_2_2_12; float x_2_2_13; struct SortKeyByteConverter { int (**x_14_3_1)(); unsigned int x_14_3_2[256]; boolx_14_3_3[256]; struct Hashmap<KB::String,unsigned int> { unsigned int x_4_4_1; unsigned int x_4_4_2; unsigned int x_4_4_3; unsigned int x_4_4_4; unsigned int x_4_4_5; boolx_4_4_6; struct HashTraits<KB::String> { } x_4_4_7; struct Bucket<KB::String,unsigned int> {} *x_4_4_8; struct Bucket<KB::String,unsigned int> {} *x_4_4_9; } x_14_3_4; } x_2_2_14; } x_2_1_2; int x_2_1_3; } x2; struct Vector<KB::Input> { unsigned int x_3_1_1; unsigned int x_3_1_2; struct Input {} *x_3_1_3; } x3; struct String { unsigned short x_4_1_1; unsigned short x_4_1_2; unsigned short x_4_1_3; unsigned short x_4_1_4; unsigned char x_4_1_5; char *x_4_1_6; BOOL x_4_1_7[16]; } x4; struct String { unsigned short x_5_1_1; unsigned short x_5_1_2; unsigned short x_5_1_3; unsigned short x_5_1_4; unsigned char x_5_1_5; char *x_5_1_6; BOOL x_5_1_7[16]; } x5; struct Vector<KB::String> { unsigned int x_6_1_1; unsigned int x_6_1_2; struct String {} *x_6_1_3; } x6; unsigned int x7; unsigned int x8; struct Hashmap<KB::String,KB::Word> { unsigned int x_9_1_1; unsigned int x_9_1_2; unsigned int x_9_1_3; unsigned int x_9_1_4; unsigned int x_9_1_5; boolx_9_1_6; struct HashTraits<KB::String> { } x_9_1_7; struct Bucket<KB::String,KB::Word> {} *x_9_1_8; struct Bucket<KB::String,KB::Word> {} *x_9_1_9; } x9; boolx10; boolx11; boolx12; boolx13; boolx14; boolx15; int x16; struct __CFString {} *x17; struct __CFLocale {} *x18; struct DynamicDictionary { struct RefPtr<KB::DynamicDictionaryImpl> { struct DynamicDictionaryImpl {} *x_1_2_1; } x_19_1_1; int x_19_1_2; } x19; struct StrokeBuildManager {} *x20; struct SortedKeyLayout { unsigned int x_21_1_1; unsigned int x_21_1_2; struct KeyArea {} *x_21_1_3; struct KeyArea {} *x_21_1_4[13]; int x_21_1_5; int x_21_1_6; float x_21_1_7; struct CGPoint { float x_8_2_1; float x_8_2_2; } x_21_1_8; struct KeyCharClassifier { unsigned short x_9_2_1; } x_21_1_9; float x_21_1_10; float x_21_1_11; float x_21_1_12; float x_21_1_13; float x_21_1_14; float x_21_1_15; float x_21_1_16; float x_21_1_17; float x_21_1_18; float x_21_1_19; float x_21_1_20; float x_21_1_21; float x_21_1_22; } x21; struct TIKeyLayout {} *x22; struct String { unsigned short x_23_1_1; unsigned short x_23_1_2; unsigned short x_23_1_3; unsigned short x_23_1_4; unsigned char x_23_1_5; char *x_23_1_6; BOOL x_23_1_7[16]; } x23; struct LayoutDictionaryContext { struct SortedKeyLayout {} *x_24_1_1; struct WordTrie {} *x_24_1_2; struct DynamicDictionary {} *x_24_1_3; struct Vector<ZT::PriorTouchKeyVectors> { unsigned int x_4_2_1; unsigned int x_4_2_2; struct PriorTouchKeyVectors {} *x_4_2_3; } x_24_1_4; struct Vector<KB::DictionaryCursors> { unsigned int x_5_2_1; unsigned int x_5_2_2; struct DictionaryCursors {} *x_5_2_3; } x_24_1_5; struct SortKeyByteConverter {} *x_24_1_6; unsigned int x_24_1_7; boolx_24_1_8; boolx_24_1_9; } x24; struct Hashmap<KB::String,KB::FPoint> { unsigned int x_25_1_1; unsigned int x_25_1_2; unsigned int x_25_1_3; unsigned int x_25_1_4; unsigned int x_25_1_5; boolx_25_1_6; struct HashTraits<KB::String> { } x_25_1_7; struct Bucket<KB::String,KB::FPoint> {} *x_25_1_8; struct Bucket<KB::String,KB::FPoint> {} *x_25_1_9; } x25; int x26; boolx27; }*)initImplementation;
- (BOOL)doesComposeText;
- (id)externalStringToInternal:(id)arg1;
- (id)internalStringToExternal:(id)arg1;
- (unsigned int)externalIndexToInternal:(unsigned int)arg1;
- (void)loadDictionaries;

@end
